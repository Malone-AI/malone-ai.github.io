<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode 每日一题②：81. 搜索旋转排序数组 II</title>
      <link href="/2025/02/01/leetcode1/"/>
      <url>/2025/02/01/leetcode1/</url>
      
        <content type="html"><![CDATA[<p>今日Leetcode的每日一题为<a href="https://leetcode.cn/problems/search-in-rotated-sorted-array-ii/description/">81. 搜索旋转排序数组 II</a>。</p><h1>思路分析</h1><p>这道题目大概意思是，原来有一个有序数组，按升序排列，但是该数组以一个未知下标进行了翻转，假如未知下标为k，那么数组从原来的下标[0,1,2,3,…,k,…n]变成了[k,k+1,k+2,…,n-1,0,1,2,3,…,k-1]。第一想法其实是遍历，虽然Leetcode官方并不会去排查你使用何种方法，但是咱们也不能拘泥于最简单的算法^o^。<br>Leetcode官方给该题的标签是二分查找，一直没明白是怎么个二分查找法？So我直接看的Leetcode官方题解，下面是Leetcode官方给的C++代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>] == target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[l] == nums[mid] &amp;&amp; nums[mid] == nums[r]) &#123;</span><br><span class="line">                ++l;</span><br><span class="line">                --r;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[l] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[l] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - <span class="number">1</span>]) &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/search-in-rotated-sorted-array-ii/solutions/704686/sou-suo-xuan-zhuan-pai-xu-shu-zu-ii-by-l-0nmp/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h2 id="特殊情况处理">特殊情况处理</h2><p>首先是对特殊情况的处理，Leetcode官方将数组中没有元素和一个元素进行了特殊处理。对于数组中没有元素时进行特殊处理是合理的，因为避免了对数组中元素的访问。而当数组中元素只有一个时没有必要进行特殊化处理，直接一般化处理即可。因为在初始化左指针和右指针时，另左指针为0，右指针为数组长度-1，在数组中只有一个元素时，左右指针均初始化为了0。此时中间元素也就是数组中的唯一元素，判断其是否为目标元素即可。</p><h2 id="一般情况">一般情况</h2><p>一般情况下进入一个while循环，并计算中间位置</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mfrac><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>+</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">mid=\frac{left+right}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em;"></span><span class="strut bottom" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span><span class="mrel">=</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">2</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mathit">t</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span></p><p>并判断中间位置对应的元素是否为target。否则又分为三种情况：</p><ul><li>无法判断判断哪一部分有序</li><li>左半部分有序</li><li>右半部分有序</li></ul><h3 id="无法判断那一部分有序">无法判断那一部分有序</h3><p>无法判断判断哪一部分有序即nums[l] == nums[mid] &amp;&amp; nums[mid] == nums[r]。此时同时缩小左右指针即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l++</span><br><span class="line">r--</span><br></pre></td></tr></table></figure><h3 id="左半部分有序">左半部分有序</h3><p>左半部分有序，即nums[l] &lt;= nums[mid]，先判断target是否在左半部分；此时又分两种情况：</p><ul><li>target在左半部分</li><li>target不在左半部分</li></ul><p>条件nums[l] &lt;= target &amp;&amp; target &lt; nums[mid]即target在左半部分，此时令右指针r = mid - 1以缩小范围，否则令l = mid + 1。</p><h3 id="右半部分有序">右半部分有序</h3><p>排查无法判断哪一部分有序和左半部分有序即右半部分有序，此时类似与左半部分有序，也分两种情况：</p><ul><li>target在右半部分</li><li>target不在右半部分</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 每日一题①：541. 反转字符串 II</title>
      <link href="/2025/01/31/leetcode0/"/>
      <url>/2025/01/31/leetcode0/</url>
      
        <content type="html"><![CDATA[<p>从12月份开始到现在陆陆续续参加了几次Leetcode的周赛，从几天也开始决定参加Leetcode的每日一题。思来想去，感觉也进行记录一下比较好。虽然大半年前也在搞这个东西，但是当时不会用hexo，当时只是使用markdown在本地进行记录，日常查看不如hexo方便。现在决定将Leetcode的每一题、周赛以及双周赛等等，总之就是对自己的学习做一个记录，方便朝花夕拾。</p><p>今日的Leetcode每日一题为<a href="https://leetcode.cn/problems/reverse-string-ii/description/">541. 反转字符串 II</a>。这里也使用官方题解作为参考：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + <span class="built_in">min</span>(i + k, n));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/reverse-string-ii/solutions/946553/fan-zhuan-zi-fu-chuan-ii-by-leetcode-sol-ua7s/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h1>思路分析</h1><p>官方题解的核心思想很简单，就是遍历字符串，每次跳过2k个字符串，然后翻转前k个,翻转字符串使用reverse函数。使用for循环进行遍历，i从0开始，每次增加2k即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>k)</span><br></pre></td></tr></table></figure><p>翻转前k个字符，即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span> (s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + i + k);</span><br></pre></td></tr></table></figure><p>此外还有两种特殊情况：</p><ul><li>如果剩余字符少于k个，就将这些字符剩余字符全部翻转</li><li>如果剩余字符少于2k个，但是大于k个，仍然将前k个字符进行翻转，其余字符保持不变。</li></ul><p>所以下述代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span> (s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + i + k);</span><br></pre></td></tr></table></figure><p>要修改成</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span> (s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + <span class="built_in">min</span>(i + k, n));</span><br></pre></td></tr></table></figure><p>使用min(i + k, n)就可以将一般情况和两种特殊情况包含进来。其实一般情况和剩余字符少于2k个但大于k个可以归为一种情况，因为它们都需要翻转前k个字符，此时min(i + k, n) = i + k。而第二种特殊情况则不同，此时剩余字符不足k个，因此min (i + k, n) = n。</p><h1>时间复杂度</h1><p>字符串的长度为n，对于一个输入参数k，循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k)</span><br></pre></td></tr></table></figure><p>的循环次数：</p><ul><li>当n为2k的整数倍时，循环次数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn><mi>k</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></li><li>当n不是2k的整数倍时，循环次数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn><mi>k</mi></mrow></mfrac><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{n}{2k}+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span>（向上取整）</li></ul><p>因此循环次数可以表示为O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mi>k</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>)。在每次循环中，执行reverse函数，reverse函数的时间复杂度为O(k)，因为在每次循环中reverse需要交换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>k</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8801079999999999em;"></span><span class="strut bottom" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>对字符。因此总的时间复杂度为O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mi>k</mi></mrow></mfrac><mo>×</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">\frac{n}{k} \times k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">×</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>)即O(n)。</p><h1>空间复杂度</h1><p>使用了常数个变量，故空间复杂度为O(1)。</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收收心，开始学习算法：子集和DP</title>
      <link href="/2025/01/30/algorithm0/"/>
      <url>/2025/01/30/algorithm0/</url>
      
        <content type="html"><![CDATA[<h1>收心回顾</h1><p>假期过了一半了，从1月9日开始到现在，已经21天了，假期余额18天。前面21天基本上是在看书、学习stm32、编程以及play。</p><p>看的书有《嵌入式C语言的自我修养》和《编译原理》，前一本看的比较多了，后一本就看了编译的基本过程，还得继续推进。</p><p>学习stm32是一个很有意思的过程，江科大的stm32教程就很高质量，目前已经学习到了使用按键控制LED。父亲每天看到我的stm32开发套件都很兴奋，他自学了电工知识，很厉害。</p><p>说自己编程了感觉自己就是在刷题，leetcode、洛谷、codeforce等等。其实在放假前的两周自己的编程的热情高涨，不是指刷题，是参与开源等等，连专业课都不顾直接去参与开源项目。考算法设计技巧与分析的前一天在给某个Github仓库的16位操作系统写clear的shell命令，然后复习三个小时，其实俺也不想复习，那天舍友发疯，吵吵闹闹到了3点半，流泪复习到4点，然后去参加9点的考试QVQ。11点考完出来吃完饭就去开发free命令，然后参与其他的开源项目，当时下一场考试是机器学习，在三天后，用了两天半去编程，半天复习考试。放假回家后没有那么高得热情了，主要是因为网络的问题。Github的仓库clone不下来也push不上去，直接download下来也不行，崩溃了。目前笔者写的这篇文章估计也得在返校之后才能放到服务器上。玩comfyui的时候，都是靠朋友下载再通过wechat传过来。不知道网络是因为DNS劫持，还是因为地域的问题。</p><p>至于play就不用多说了。</p><p><img src="/images/zhen_zi_dan.jpg" alt="嘻嘻"></p><h1>余下假期打算</h1><p>后续的18天，决定用来学习一下算法、stm32并且精进一下C++。我发现了一个很好的网站<a href="https://oi-wiki.org">OI wiki</a>，用来学习算法正合适。stm32还是接着看B站江科大的视频，再从嘉立创找点项目做做感觉就行，但是目前还是先学完江科大的视频为先。精进C++不知道用什么办法比较好，目前用Github是不行了，看看网上游戏开发是否可行。</p><h1>今日算法</h1><p>今天就学了学子集和DP，DP就是动态规划（Dynamic programing），OI wiki讲的比较抽象，就看了博客园的一篇博客<a href="https://www.cnblogs.com/Tenshi/p/14520614.html">【DP】解析 SOSdp（子集和 dp）</a>，感觉挺不错的。</p><p>子集和DP用于处理前缀和问题。前缀和问题，在一维时就是数列的前n项和；在二维或者多维度情况下给了两种方法：</p><ul><li>容斥原理<br>容斥原理（可以参考OI wiki的<a href="https://oi-wiki.org/math/combinatorics/inclusion-exclusion-principle/">容斥原理</a>）就比方说班上有30个人喜欢语文，20个人喜欢数学，40个人喜欢英语，问这个班上有多少个人。如果单纯地将这三个数字相加肯定是大于班上的总人数的，因为班上会有部分人喜欢其中的两门甚至三门。这个感觉还需要再去理解一下，通过韦恩图和集合能很好理解两类或者三类的情况，但是对于更多类没有理解透彻。OI wiki上还给了一道例题<a href="https://www.luogu.com.cn/problem/P1387">洛谷 P1387 最大正方形</a></li><li>逐维求和<br>逐维求和就是每次固定一个维度，求其它维度，直到固定完所有维度。</li></ul><p>而子集和DP主要是用于求高维前缀和问题，子集和即Sum Over Subsets。子集和问题的大致描述为：一个大小为n的集合上定义了一个函数f，要求出子集和函数g，且有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo>(</mo><mi>S</mi><mo>)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>T</mi><mo>⊆</mo><mi>S</mi></mrow></msub><mi>f</mi><mo>(</mo><mi>T</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">g(S)=\sum_{T \subseteq S}f(T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.050005em;"></span><span class="strut bottom" style="height:2.43952em;vertical-align:-1.389515em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mrel">=</span><span class="mop op-limits"><span class="vlist"><span style="top:1.194336em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mrel">⊆</span><span class="mord mathit" style="margin-right:0.05764em;">S</span></span></span></span><span style="top:-0.000005000000000032756em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></span></p><p>其中T是集合S的所有子集。<br>这里直接引用OI wiki的<a href="https://oi-wiki.org/basic/prefix-sum/#%E7%89%B9%E4%BE%8B%E5%AD%90%E9%9B%86%E5%92%8C-dp">代码</a>吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  std::cin &gt;&gt; n;</span><br><span class="line">  <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">1</span> &lt;&lt; n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span>&amp; x : a) std::cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Copy.</span></span><br><span class="line">  <span class="keyword">auto</span> ps = a;</span><br><span class="line">  <span class="comment">// Loop over dimensions.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="comment">// Loop over i-th dimension.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> st = <span class="number">0</span>; st &lt; (<span class="number">1</span> &lt;&lt; n); ++st) &#123;</span><br><span class="line">      <span class="comment">// This condition implies that i-th dimension is 1.</span></span><br><span class="line">      <span class="keyword">if</span> ((st &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// ps[... 1 ...] += ps[... 0 ...]. (i-th dimension)</span></span><br><span class="line">        ps[st] += ps[st ^ (<span class="number">1</span> &lt;&lt; i)];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> x : ps) std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>n表示集合中有n个元素，a是二进制编码，表示在该点的取值。在两层for循环中，外层循环用于遍历二进制编码的每一位，内层循环用于遍历每一个状态。貌似有点说不清的感觉。。。如果n为2，则使用两位二进制编码，1 &lt;&lt; n即1 &lt;&lt; 2 = 4，也就是a有四个元素，a[0]就是a[00]，a[1]就是a[01],a[2]就是a[10]，a[3]就是a[11]。把a[00]看成a[0][0]或许更好理解一点。ps数组就是前缀和数组，ps[1][1]即a[0][0]+a[0][1]+a[1][0]+a[1][1]。这样感觉更容易理解。内层循环就是遍历二进制编码的每一位，内层循环遍历a中每一个元素即a[0][0]、a[0][1]、a[1][0]、a[1][1]，虽然循环里显示的是ps，但是使用了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> ps=a</span><br></pre></td></tr></table></figure><p>将a拷贝了一份给ps。两层循环实现了每次遍历a中每一个元素的每一位，最终遍历完所有位，也就是前面所说的逐维求和。注意在遍历时就像二进制变化一样，也就是先a[00]，然后a[01]，再然后a[10]、a[11]。在循环里还有一个判断条件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (st &gt;&gt; i &amp; <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>其实就是在遍历第i位二进制编码，判断其是否为1。如果其为1，就对其取反。'^'符号是按位异或符号，当为1时，与1异或得0，从而实现第i位取反。<br>还有一点就是a[00]的子集为a[00]，而a[10]的子集有a[10]和a[00]。简单点说就是如果某一位为1，就将该位置为0作为一个子集。再比如说a[101]的子集有a[100]、a[001]、a[000]和a[101]。当i=0时，也就是二进制的最低位，p[11]+=p[10]。<br>至于为什么要加下列判断条件呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (st &gt;&gt; i &amp; <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>其实是为了正确求和。当有此判断条件时，可以使得p[10]+=p[00]，注意是&quot;+=&quot;，前面差点把+忘了，p[00]=a[00]，最终可得p[10]=a[10]+a[00]。如果没有此判断条件就会使得p[10]+=(p[11]+p[00])，也就是说把p[11]也当成了p[10]的子集＋上了，这就会与求ps[1][0]时，本来ps[1][0]=a[0][0]+a[0][1]+a[1][0]，但却错误地把a[1][1]也加进去了，并且其他元素也有重复计算。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pomopomo</title>
      <link href="/2024/12/25/Pomopomo/"/>
      <url>/2024/12/25/Pomopomo/</url>
      
        <content type="html"><![CDATA[<h1>番茄钟开发学习笔记</h1><h2 id="项目简介">项目简介</h2><p>在DataWhale活动中，我使用豆包AI编程助手基于HTML和JavaScript开发了一个番茄钟应用。番茄钟是一种时间管理工具，通过分割工作时间和休息时间，提高工作效率和专注度。</p><h2 id="项目目标">项目目标</h2><ul><li>设计简洁：界面简洁直观，用户友好。</li><li>功能完善：实现基本的番茄工作法功能，计时、暂停、重置和统计。</li><li>跨平台兼容：确保在不同浏览器和设备上正常运行。</li><li>代码优化：编写高效、可维护的代码，遵循最佳实践。</li></ul><h2 id="技术栈">技术栈</h2><ul><li>前端：<ul><li>HTML5</li><li>CSS3</li><li>JavaScript (ES6)</li></ul></li><li>开发工具：<ul><li>Visual Studio Code</li><li>豆包AI编程助手</li></ul></li></ul><h2 id="开发步骤">开发步骤</h2><ol><li>项目初始化<br>创建项目文件夹，初始化Git仓库。<br>结构如下：</li><li>设计界面<br>使用HTML构建基本结构，包括计时显示、控制按钮（开始、暂停、重置）。<br>使用CSS进行样式设计，确保界面响应式，适配不同屏幕尺寸。</li><li>实现计时功能<br>使用JavaScript实现倒计时逻辑。<br>处理开始、暂停、重置按钮的事件。</li><li>添加统计功能<br>记录完成的番茄钟次数。<br>使用localStorage保存数据，持久化统计信息。</li><li>优化用户体验<br>添加声音提醒。<br>实现暗模式和亮模式切换。<br>增加动画效果，提高交互性。</li></ol><h2 id="遇到的挑战与解决方案">遇到的挑战与解决方案</h2><ol><li>定时器精度问题<br>挑战：使用setInterval可能导致计时不够精确，特别是在浏览器标签页不活跃时。</li></ol><p>解决方案：改用基于Date的计算，通过记录开始时间和当前时间差来精准计算剩余时间。</p><ol start="2"><li>响应式设计实现<br>挑战：确保应用在不同设备和屏幕尺寸下都能良好显示。</li></ol><p>解决方案：使用CSS媒体查询和弹性布局（Flexbox）优化布局，确保元素自适应调整。</p><ol start="3"><li>数据持久化<br>挑战：如何在用户关闭页面后保留统计数据。</li></ol><p>解决方案：利用localStorage在浏览器中存储完成的番茄钟次数，实现数据的持久化。</p><h1>学习收获</h1><ul><li>前端技能提升：通过项目实践，深入理解HTML、CSS和JavaScript的基本用法和高级技巧。</li><li>项目管理：学会使用Git进行版本控制，合理分配开发任务，保持代码整洁。</li><li>问题解决能力：在开发过程中遇到问题，通过查阅文档、寻求社区帮助，掌握了有效的解决问题的方法。</li><li>用户体验设计：了解用户需求，优化界面和交互，提高应用的易用性和用户满意度。</li></ul><h1>未来改进</h1><p>多语言支持：添加多种语言选择，提升国际用户体验。<br>数据可视化：使用图表展示工作与休息时间的分配情况。<br>用户账户系统：允许用户注册和登录，保存个性化设置和统计数据。<br>移动应用开发：将Web版番茄钟转化为移动应用，扩展使用场景。</p><h1>总结</h1><p>通过本次项目，我不仅实践了前端开发的基本技能，还提高了我的项目管理和问题解决能力。通过使用豆包AI编程助手的辅助，我能够更高效地完成开发任务，为未来的项目打下了坚实的基础。未来，我计划在此基础上添加更多功能，进一步提升应用的实用性和用户体验。</p><h1>致谢</h1><p>感谢DataWhale提供的学习平台和资源，以及豆包AI编程助手在开发过程中的有力支持。</p><h1>参考资料</h1><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95">番茄工作法</a></li><li><a href="https://www.datawhale.cn/activity/116/23/94?rankingPage=1">Datawhale</a></li><li><a href="https://www.marscode.cn/home?utm_source=school&amp;utm_medium=datawhalelearn&amp;utm_campaign=camp1">豆包AI编程助手</a></li></ul><h1>附录</h1><h2 id="完整代码">完整代码</h2><h3 id="index-html"><code>index.html</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>番茄时钟<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.tailwindcss.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 自定义样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.timer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Helvetica Neue&#x27;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">5rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttons</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: background-color <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.start</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.start</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#45a049</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.pause</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ff9800</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.pause</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f57c00</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.reset</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f44336</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.reset</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#e53935</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#stats</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Arial, sans-serif&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;bg-gray-100 flex items-center justify-center h-screen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-white p-8 rounded shadow-md w-96&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-2xl font-semibold mb-4&quot;</span>&gt;</span>番茄时钟<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;timer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;timer text-4xl font-bold text-gray-700&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex mt-8 buttons&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button start&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;pause&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button pause&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;stats&quot;</span>&gt;</span>已完成番茄钟次数：0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="script-js"><code>script.js</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timer;</span><br><span class="line"><span class="keyword">let</span> isRunning = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> time = <span class="number">1500</span>; <span class="comment">// 25分钟</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timerDisplay = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;timer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> startBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pauseBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pause&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> resetBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;reset&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> statsDisplay = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;stats&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateDisplay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>(time / <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">const</span> seconds = time % <span class="number">60</span>;</span><br><span class="line">    timerDisplay.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;minutes.toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>:<span class="subst">$&#123;seconds.toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateStats</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;pomodoroCount&#x27;</span>) || <span class="number">0</span>;</span><br><span class="line">    statsDisplay.<span class="property">textContent</span> = <span class="string">`已完成番茄钟次数：<span class="subst">$&#123;count&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isRunning) <span class="keyword">return</span>;</span><br><span class="line">    isRunning = <span class="literal">true</span>;</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            time--;</span><br><span class="line">            <span class="title function_">updateDisplay</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">            isRunning = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">let</span> count = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;pomodoroCount&#x27;</span>) || <span class="number">0</span>;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;pomodoroCount&#x27;</span>, count);</span><br><span class="line">            <span class="title function_">updateStats</span>();</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;时间到！&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pauseTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    isRunning = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resetTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    isRunning = <span class="literal">false</span>;</span><br><span class="line">    time = <span class="number">1500</span>;</span><br><span class="line">    <span class="title function_">updateDisplay</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, startTimer);</span><br><span class="line">pauseBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, pauseTimer);</span><br><span class="line">resetBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, resetTimer);</span><br><span class="line"></span><br><span class="line"><span class="title function_">updateDisplay</span>();</span><br><span class="line"><span class="title function_">updateStats</span>();</span><br></pre></td></tr></table></figure><h3 id="styles-css"><code>styles.css</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#timer</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.controls</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#stats</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> AI编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现 Shell 的 clear 命令</title>
      <link href="/2024/12/23/OS-32Bit/"/>
      <url>/2024/12/23/OS-32Bit/</url>
      
        <content type="html"><![CDATA[<h1>简述</h1><p> 在这篇博客中，我将分享如何在一个操作系统项目<a href="https://github.com/IlanVinograd/OS_32Bit">IlanVinograd/OS_32Bit</a>中实现 clear 命令，进行清屏，然后重置光标定位到左上角的问题。</p><h2 id="开始遇到的问题">开始遇到的问题</h2><p> 一开始我遇到的问题是 Docker，这个项目的作者提供了 Dockerfile 文件来帮助配置环境，但是国内就连不上 Docker ( QvQ 或许有，但是我暂时不知道怎么搞，放到后续去学吧)。所以我就按照 Dockerfile 文件在本地安装了依赖，在本地编译所需要的工具，像 binutils 和 gcc-i686-elf ，并配置好环境变量，很顺利地在本地运行起了项目，不得不说项目作者很有水平。</p><p> 在操作系统的 Shell 中，clear 命令用于清空屏幕并将光标重置到左上角。一开始我是在 Code/Kernel/Sources/shell.c 文件中的 handleBackgroundColor 函数中识别 clear 命令，然后调用 clearScreen 函数进行清屏，在调用 setCursorPosition 函数将光标重置到左上角。但是这样进行处理有一点问题。 输入 clear 命令后要按下回车，有一个专门的函数 handle_enter 函数会覆盖掉我对 setCursorPosition 函数的调用， handle_enter 函数会自动将光标定位到下一行开头。所以我就在这个函数里也对 clear 命令进行识别，然后刷新输入缓冲区，退出即可。</p><p> 正当我兴致勃勃的想要向项目作者申请 issue 的 assign 时，并发起 Pull request 时，我不小心在本地合并分支到了 main 分支。虽然我学习过 git 的使用，但是确实用的太少了，导致很多命令不熟悉，进行了误操作，后续写一篇博客总结总结。所以又重新 clone 了项目， 进行修改。这次我突然想到为何要在 handleBackgroundColor 函数里识别 clear 命令呢？直接在 handle_enter 统一处理所有的 shell 命令不就行了。这里补充一点，项目作者实现了这个 32 位操作系统的整体框架，大部分 shell 命令都没有实现。在我进行的时候仅仅只实现了一个 test 测试命令。当然正是这个命令启发了我，让我使用最少的代码、最小的修改完成了这个功能。一开始我还使用关中断的方式实现原子操作来实现清屏与光标重定位，虽然没成功，但 exp++，哈哈。</p><h2 id="修改内容">修改内容</h2><ol><li>更新 handle_enter 函数<br> 首先，我在 handle_enter 函数中添加了对 clear 命令的处理逻辑。具体来说，当检测到输入的命令不是 clear 时，将光标移动到下一行的开头。否则，清空屏幕并将光标重置到左上角。</li></ol><p>修改前：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle_enter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">uint16_t</span> row = keyboard_cursor_position / VGA_COLS;</span><br><span class="line">    <span class="type">uint16_t</span> col = keyboard_cursor_position % VGA_COLS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear the blinking cursor before processing</span></span><br><span class="line">    <span class="built_in">setCursorPosition</span>(row, col);</span><br><span class="line">    <span class="built_in">putc</span>(<span class="string">&#x27; &#x27;</span>, COLOR_BLACK_ON_WHITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Shell Functions</span></span><br><span class="line">    <span class="built_in">scrollIfNeeded</span>(row);</span><br><span class="line">    <span class="built_in">handleBackgroundColor</span>(inputBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//test temp</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">uint8_t</span>*)inputBuffer, (<span class="type">uint8_t</span>*)<span class="string">&quot;test&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">create_task</span>((<span class="type">uintptr_t</span>)test);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// end test temp</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Move cursor to the next line</span></span><br><span class="line">    row++;</span><br><span class="line">    <span class="keyword">if</span> (row &gt;= VGA_ROWS) &#123;</span><br><span class="line">        <span class="comment">// Scroll again if we&#x27;re still at the last row</span></span><br><span class="line">        <span class="built_in">scroll_screen</span>();</span><br><span class="line">        row = VGA_ROWS - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    keyboard_cursor_position = row * VGA_COLS;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setCursorPosition</span>(row, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset input buffer to default size</span></span><br><span class="line">    <span class="built_in">free</span>(inputBuffer); <span class="comment">// Free the current buffer</span></span><br><span class="line">    inputBufferSize = <span class="number">256</span>; <span class="comment">// Reset the buffer size</span></span><br><span class="line">    inputBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(inputBufferSize); <span class="comment">// Allocate a new buffer</span></span><br><span class="line">    <span class="keyword">if</span> (!inputBuffer) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Could not reallocate input buffer.\n&quot;</span>, RED_ON_BLACK_WARNING);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inputBuffer[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// Initialize the buffer</span></span><br><span class="line">    inputBufferIndex = <span class="number">0</span>;  <span class="comment">// Reset the index</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle_enter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">uint16_t</span> row = keyboard_cursor_position / VGA_COLS;</span><br><span class="line">    <span class="type">uint16_t</span> col = keyboard_cursor_position % VGA_COLS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear the blinking cursor before processing</span></span><br><span class="line">    <span class="built_in">setCursorPosition</span>(row, col);</span><br><span class="line">    <span class="built_in">putc</span>(<span class="string">&#x27; &#x27;</span>, COLOR_BLACK_ON_WHITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Shell Functions</span></span><br><span class="line">    <span class="built_in">scrollIfNeeded</span>(row);</span><br><span class="line">    <span class="built_in">handleBackgroundColor</span>(inputBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//test temp</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">uint8_t</span>*)inputBuffer, (<span class="type">uint8_t</span>*)<span class="string">&quot;test&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">create_task</span>((<span class="type">uintptr_t</span>)test);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// end test temp</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Move cursor to the next line if it is not clear command</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">uint8_t</span>*)inputBuffer, (<span class="type">uint8_t</span>*)<span class="string">&quot;clear&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        row++;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= VGA_ROWS) &#123;</span><br><span class="line">            <span class="comment">// Scroll again if we&#x27;re still at the last row</span></span><br><span class="line">            <span class="built_in">scroll_screen</span>();</span><br><span class="line">            row = VGA_ROWS - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        keyboard_cursor_position = row * VGA_COLS;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setCursorPosition</span>(row, <span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">clearScreen</span>();</span><br><span class="line">        keyboard_cursor_position = <span class="number">2</span> * VGA_COLS;</span><br><span class="line">        <span class="built_in">setCursorPosition</span>(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset input buffer to default size</span></span><br><span class="line">    <span class="built_in">free</span>(inputBuffer); <span class="comment">// Free the current buffer</span></span><br><span class="line">    inputBufferSize = <span class="number">256</span>; <span class="comment">// Reset the buffer size</span></span><br><span class="line">    inputBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(inputBufferSize); <span class="comment">// Allocate a new buffer</span></span><br><span class="line">    <span class="keyword">if</span> (!inputBuffer) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Could not reallocate input buffer.\n&quot;</span>, RED_ON_BLACK_WARNING);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inputBuffer[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// Initialize the buffer</span></span><br><span class="line">    inputBufferIndex = <span class="number">0</span>;  <span class="comment">// Reset the index</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>修复 clearScreen 函数<br> 接下来，我修复了 clearScreen 函数，使其从行索引 2 开始清除，而不是原先的行索引 3。从索引 2 开始清除是因为项目作者在前两行打印了系统的一些信息。这里估计是项目作者一时疏忽。</li></ol><p> 为了确保修改后的代码正常工作，我重新编译，使用 qemu 模拟器(有没有大佬教教我怎么掌握这玩意儿，网上教程好少)启动这个系统，接下来：</p><ul><li>在 Shell 中输入 clear 命令并按下回车。</li><li>验证屏幕是否被清空，并且光标是否正确定位到左上角。</li></ul><h2 id="总结">总结</h2><p> 通过上述修改，我成功实现了 Shell 的 clear 命令。现在，输入 clear 命令后，屏幕会被清空，光标正确定位到左上角，同时不影响其他命令的正常运行。<br> 简单总结一下 git 的使用。首先将项目仓库 fork 到自己的 GitHub，然后从自己的 Github 将项目 clone 到本地。创建新的分支 new_branch_name（随便取的名字，只是做一个例子），在这个分支上进行修改。修改完毕后 git add 提交修改的文件，然后 git commit -m 对所进行的修改进行描述，使用双引号 &quot; 开头，可以实现多行描述，最后使用双引号 &quot; 结尾即可。一般 commit 的第一行对实现的功能或者修改进行大致描述，然后空一行详细描述做出的修改，比如修改了那个文件的那个函数等等。空一行是为了在执行 git log --oneline 时只展示大致描述，而不展示详细描述。做完上述工作后执行 git push origin new_branch_name 命令，然后登陆 Github 到自己的仓库页面，就可以看到 Create pull request 按钮提示你有一个合并请求。点击后像 commit 一样填写 decription 即可。如果你的 commit 只有一个它会自动帮你填写成你的 commit 。否则不会帮你自动填写。这样就算是一个完整的 PR 啦！<br> 总结一句话就是收获满满！<br> 希望这篇博客对您有所帮助。如果您有任何问题或建议，欢迎在评论区留言（评论区还没搓好，待续啦）。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell命令 </tag>
            
            <tag> C语言 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, this is Malone!</title>
      <link href="/2024/12/18/Hello-this-is-Malone/"/>
      <url>/2024/12/18/Hello-this-is-Malone/</url>
      
        <content type="html"><![CDATA[<h1>欢迎来到我的个人博客</h1><p>大家好！我是Malone，欢迎来到我的个人博客。在这里，我将分享我对人工智能和编程的热情与探索。</p><h1>关于我</h1><p>从小我就对计算机充满了好奇心，尤其是AI和编程。随着时间的推移，我不断学习和实践，逐渐积累了一些经验和知识。现在，我希望通过这个博客，与大家分享我的学习心得和项目经验。</p><h1>博客目标</h1><p>这个博客的主要目标是：</p><ul><li><strong>分享知识</strong>：无论你是初学者还是有经验的开发者，我都希望我的文章能对你有所帮助。</li><li><strong>记录学习过程</strong>：通过记录我的学习过程，我希望能更好地理解和掌握AI和编程相关的知识。</li><li><strong>交流互动</strong>：我非常期待与大家交流，互相学习，共同进步。</li></ul><h1>未来计划</h1><p>在接下来的时间里，我计划撰写以下几个方面的内容：</p><!-- - **AI基础**：介绍AI的基本概念和原理。 --><ul><li><strong>编程教程</strong>：分享一些编程语言（主要是Python、C、C++）的教程和技巧。</li><li><strong>项目实战</strong>：展示一些实际项目的开发过程和心得体会。</li><li><strong>最新动态</strong>：分享AI和编程领域的最新研究成果和技术动态。</li></ul><h1>互动交流</h1><p>我非常欢迎大家在文章下方留言，提出问题或建议。你也可以通过邮箱favorite.vampire@qq.com与我取得联系，让我们一起交流和探讨。</p><h1>ending</h1><p>感谢你读到这里！希望我的博客能对你有所帮助。下一篇文章，我将介绍AI的基本概念，敬请期待！</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
