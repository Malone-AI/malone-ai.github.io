<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>零一世界</title>
  
  
  <link href="http://malone-ai.github.io/atom.xml" rel="self"/>
  
  <link href="http://malone-ai.github.io/"/>
  <updated>2025-02-15T14:27:53.253Z</updated>
  <id>http://malone-ai.github.io/</id>
  
  <author>
    <name>Malone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode 每日一题十六：1706. 球会落何处</title>
    <link href="http://malone-ai.github.io/2025/02/15/leetcode16/"/>
    <id>http://malone-ai.github.io/2025/02/15/leetcode16/</id>
    <published>2025-02-15T14:14:45.000Z</published>
    <updated>2025-02-15T14:27:53.253Z</updated>
    
    <content type="html"><![CDATA[<p>今日的Leetcode每日一题为<a href="https://leetcode.cn/problems/where-will-the-ball-fall/description/">1706. 球会落何处</a>。</p><p>用一个大小为 m x n 的二维网格 grid 表示一个箱子。你有 n 颗球。箱子的顶部和底部都是开着的。</p><p>箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。</p><ul><li>将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。</li><li>将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。</li></ul><p>在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 “V” 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。</p><p>返回一个大小为 n 的数组 answer ，其中 answer[i] 是球放在顶部的第 i 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 -1 。</p><h1>分析理解</h1><p>给了一个矩阵，矩阵中每个元素要么为1要么为-1，为1代表挡板连接左上角和右下角；为-1代表挡板连接右上角和左下角。然后从最上层出发的每个小球最终落点的位置，使用下标表示，其中如果小球不能达到底部就返回-1。</p><p>看到题目是一脸懵逼，直接看灵茶山艾府的解题思路，一看大家基本上都是灵茶山艾府的思路（doge）。</p><p>他的思路是，从列开始遍历，一列一列地遍历。而在对每列的遍历中，进行逐行遍历。开始行遍历之前，记录下当前遍历的列号，然后进入行遍历，在列号上加上当前位置所对应位置的值，相当于左右移动。然后每次记录进行加法后的列号是否小于0或者大于列尺寸最大值（此时出界，对应于卡在边界），是否此时的列号所对应的矩阵元素值是否与上一次列号所对应的矩阵元素值相等（此时如果不相等，则形成了“V”形）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findBall</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> cur = j;</span><br><span class="line">            <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt; &amp;row: grid) &#123;</span><br><span class="line">                <span class="type">int</span> d = row[cur];</span><br><span class="line">                cur += d;</span><br><span class="line">                <span class="keyword">if</span> (cur &lt; <span class="number">0</span> || cur &gt;= n || row[cur] != d) &#123;</span><br><span class="line">                    cur = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res[j] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>复杂度</h1><p>时间复杂度为O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>)，空间复杂度为O(1)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今日的Leetcode每日一题为&lt;a href=&quot;https://leetcode.cn/problems/where-will-the-ball-fall/description/&quot;&gt;1706. 球会落何处&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;用一个大小为 m x n 的二维网格 g</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="数组" scheme="http://malone-ai.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="矩阵" scheme="http://malone-ai.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
    <category term="模拟" scheme="http://malone-ai.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 每日一题十五：1552. 两球之间的磁力</title>
    <link href="http://malone-ai.github.io/2025/02/14/leetcode15/"/>
    <id>http://malone-ai.github.io/2025/02/14/leetcode15/</id>
    <published>2025-02-14T10:34:12.000Z</published>
    <updated>2025-02-15T14:13:59.971Z</updated>
    
    <content type="html"><![CDATA[<p>今日Leetcode 每日一题为<a href="https://leetcode.cn/problems/magnetic-force-between-two-balls/description/">1552. 两球之间的磁力</a>：</p><p>在代号为 C-137 的地球上，Rick 发现如果他将两个球放在他新发明的篮子里，它们之间会形成特殊形式的磁力。Rick 有 n 个空的篮子，第 i 个篮子的位置在 position[i] ，Morty 想把 m 个球放到这些篮子里，使得任意两球间 最小磁力 最大。</p><p>已知两个球如果分别位于 x 和 y ，那么它们之间的磁力为 |x - y| 。</p><p>给你一个整数数组 position 和一个整数 m ，请你返回最大化的最小磁力。</p><h1>分析理解</h1><p>position数组的每个元素position[i]代表一个位置，然后从中挑选出m个位置，求得这m个位置之间的距离的绝对值（这个绝对值即磁力值）中的最小值，并且还要使这个最小值最大。</p><h1>基本思路</h1><p>这道题呈现出明显的<code>单调性</code>：</p><ul><li>如果我们能找到一个磁力值d，使得可以放置m个球，那么所有比d小的值也一定可以满足条件。因为如果d可以，那么更小的d更容易满足。</li><li>如果d不能满足条件，那么所有比d大的值也一定不能满足条件。因为如果d不可以，那么更大的值只会更难满足。</li></ul><p>因此此题目有明显的单调性，考虑<code>二分查找</code>。使用二分法遍历d的可能值，并且不断检查当前的d值是否满足条件，满足就尝试更大的d，不满足就尝试更小的d值。d的遍历区间为position中的两两元素之间的最小值m与最大值M组成的区间[m, M]。position数组是未经排序的，经过排序后很容易求得M为最后一个元素减去第一个元素，而m不容易求得。但是我们注意到有条件1≤position[i]≤10^9，因此可以得到m的下界为1。</p><p>现在只需要确定检查当前d值是否满足条件的逻辑就可以了。基本想法是设置一个pre代表上一个放小球的位置，初始化为position[0]，并设定一个计数器count=1，然后从position[1]开始逐渐向后遍历，每当position[i]-pre的值≥d时，就使计数器自增，并修正pre为position[i]即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDistance</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; position, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = position.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(position.<span class="built_in">begin</span>(), position.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> left = <span class="number">1</span>, right = position.<span class="built_in">back</span>() - position[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(mid, position, m)) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">                res = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> d, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; pos, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>; <span class="comment">// 第一个球已放置</span></span><br><span class="line">        <span class="type">int</span> prev = pos[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> n = pos.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos[i] - prev &gt;= d) &#123;</span><br><span class="line">                ++count;</span><br><span class="line">                prev = pos[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt;= m ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typedef enum &#123;</span></span><br><span class="line"><span class="comment">//     false, </span></span><br><span class="line"><span class="comment">//     true</span></span><br><span class="line"><span class="comment">// &#125;bool;</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> d, <span class="type">int</span> *pos, <span class="type">int</span> n, <span class="type">int</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>; <span class="comment">// 第一个球已放置</span></span><br><span class="line">    <span class="type">int</span> pre = pos[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pos[i] - pre &gt;= d) &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            pre = pos[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count &gt;= m ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmpFunc</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span> *)a - *(<span class="type">int</span> *)b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">maxDistance</span><span class="params">(<span class="type">int</span>* pos, <span class="type">int</span> n, <span class="type">int</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line">    qsort(pos, n, <span class="keyword">sizeof</span>(*pos), cmpFunc);</span><br><span class="line">    <span class="type">int</span> left = <span class="number">1</span>, right = pos[n<span class="number">-1</span>] - pos[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid, pos, n, m)) &#123;</span><br><span class="line">            res = mid;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>复杂度分析</h1><h1>时间复杂度</h1><p>首先快排的复杂度为O(n log n)，然后二分查找的复杂度为O(log M)（M为position数组中任意两两元素差的绝对值中的最大值，check函数的复杂度为O(n)，总体复杂度为O(n log n + n log M)。</p><h1>空间复杂度</h1><p>使用常数个变量，空间复杂度为O(1)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今日Leetcode 每日一题为&lt;a href=&quot;https://leetcode.cn/problems/magnetic-force-between-two-balls/description/&quot;&gt;1552. 两球之间的磁力&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;在代号为 C-137</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="二分查找" scheme="http://malone-ai.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 每日一题十四：1742. 盒子中小球的最大数量</title>
    <link href="http://malone-ai.github.io/2025/02/13/leetcode14/"/>
    <id>http://malone-ai.github.io/2025/02/13/leetcode14/</id>
    <published>2025-02-13T10:31:36.000Z</published>
    <updated>2025-02-15T14:14:07.531Z</updated>
    
    <content type="html"><![CDATA[<p>今日的Leetcode每日一题为<a href="https://leetcode.cn/problems/maximum-number-of-balls-in-a-box/description/">1742. 盒子中小球的最大数量</a>。</p><p>你在一家生产小球的玩具厂工作，有 n 个小球，编号从 lowLimit 开始，到 highLimit 结束（包括 lowLimit 和 highLimit ，即 n == highLimit - lowLimit + 1）。另有无限数量的盒子，编号从 1 到 infinity 。</p><p>你的工作是将每个小球放入盒子中，其中盒子的编号应当等于小球编号上每位数字的和。例如，编号 321 的小球应当放入编号 3 + 2 + 1 = 6 的盒子，而编号 10 的小球应当放入编号 1 + 0 = 1 的盒子。</p><p>给你两个整数 lowLimit 和 highLimit ，返回放有最多小球的盒子中的小球数量。如果有多个盒子都满足放有最多小球，只需返回其中任一盒子的小球数量。</p><h1>思路分析</h1><p>遍历[lowLimit, highLimit]，并且计算每位数字之和，然后记录到哈希表中，返回最大的一个，这是我的第一想法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countBalls</span><span class="params">(<span class="type">int</span> lowLimit, <span class="type">int</span> highLimit)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = lowLimit; i &lt;= highLimit; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> cur = <span class="built_in">bitSum</span>(i);</span><br><span class="line">            hash[cur]++;</span><br><span class="line">            <span class="keyword">if</span> (hash[cur] &gt; res)</span><br><span class="line">                res = hash[cur];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">bitSum</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">            res += num % <span class="number">10</span>;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>灵茶山艾府的解法</h1><p>下午的时候看见了灵神写的题解，灵神就是灵神，直接给出了三种方法：</p><ol><li>暴力枚举</li><li>前缀和</li><li>数位DP</li></ol><h2 id="暴力枚举">暴力枚举</h2><p>暴力枚举的思路和我相同，但灵神更牛的是使用了一个数组来存储各个数位和的个数，他注意到了条件1 &lt;= lowLimit &lt;= highLimit &lt;= <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord"><span class="mord mathrm">0</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">5</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>，数位和最大值为数字99999计算所得的45，最小为1，直接用组存储。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countBalls</span><span class="params">(<span class="type">int</span> lowLimit, <span class="type">int</span> highLimit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt[<span class="number">46</span>]&#123;&#125;; <span class="comment">// 99999 的数位和 = 45</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = lowLimit; i &lt;= highLimit; i++) &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x = i; x &gt; <span class="number">0</span>; x /= <span class="number">10</span>) &#123;</span><br><span class="line">                s += x % <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[s]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ranges::<span class="built_in">max</span>(cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：灵茶山艾府</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/maximum-number-of-balls-in-a-box/solutions/3073112/san-chong-fang-fa-bao-li-mei-ju-qian-zhu-kze9/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h2 id="前缀和">前缀和</h2><h2 id="数位DP">数位DP</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今日的Leetcode每日一题为&lt;a href=&quot;https://leetcode.cn/problems/maximum-number-of-balls-in-a-box/description/&quot;&gt;1742. 盒子中小球的最大数量&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你在一家生产小</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="动态规划" scheme="http://malone-ai.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="暴力" scheme="http://malone-ai.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="哈希表" scheme="http://malone-ai.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="枚举" scheme="http://malone-ai.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
    <category term="记忆化搜索" scheme="http://malone-ai.github.io/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
    <category term="前缀和" scheme="http://malone-ai.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 每日一题十三：1760. 袋子里最少数目的球</title>
    <link href="http://malone-ai.github.io/2025/02/12/leetcode13/"/>
    <id>http://malone-ai.github.io/2025/02/12/leetcode13/</id>
    <published>2025-02-12T09:59:27.000Z</published>
    <updated>2025-02-15T14:14:15.715Z</updated>
    
    <content type="html"><![CDATA[<p>这里想谈谈之前写Leetcode 每日一题文章的顺序，我基本上是先把代码放上去，然后将代码进行详细讲解。感觉这种方法不合适，因为是先有思路然后有代码。先代码后思路显然是本末倒置了，这一点要改改。</p><p>今日的Leetcode每日一题为<a href="https://leetcode.cn/problems/minimum-limit-of-balls-in-a-bag/description/">1760. 袋子里最少数目的球</a>。</p><h1>分析理解</h1><p>该题给定一个数组nums，其中的每个元素nums[i]代表第i个袋子中有几个小球。还给定了一个数maxOperations即最大操作数。接下来要对nums进行操作，每次操作可以将第i个袋子中的小球拆分到两个袋子里。总共进行的操作数不能超过maxOperations，最后要使得进行不超过maxOperations次的操作后，使得nums数组中的最大值最小（花了一点时间才理解doge）。</p><h1>思路分析</h1><p>这道题的一个关键点是寻找一个最小的“最大值”，也就是说我们找到的最大值mid，使得在进行不超过maxOperations次操作后，所有袋子中的小球数都不超过mid即nums中每个元素num都满足num &lt;= mid。因为当mid可能时，比mid更大的数也一定可行。比如当mid=3可行时，mid=4或者mid=5等更大的整数也一定可行，因为允许的最大值变大了，操作次数会更少或者不变。当mid不可行时，比mid更小的数一定不可行，因为允许的最大值变小了，操作次数会更多。比如mid=3不可行时，那么mid=2需要更多的操作次数。因此本题目存在单调性，符合二分搜索的应用条件。</p><p>题目给定了条件nums中所有元素均为大于等于1的整数，所以mid的下界为1，而上界为nums中最大元素的值。因此我们通过二分搜索来遍历[1, M]就行（M为nums中最大元素）。</p><p>另外一个关键点就是拆分次数的公式，就是给定一个num，将其拆分到不大于mid的次数如何计算。一开始我认为其为num // mid，然后对于num=9，mid=3，发现9/3=3，但是9拆分到不大于3只需两次操作：9=6+3=3+3+3。。。</p><p>对于一个含有num个小球的袋子，进行拆分使得每个袋子中的小球数不超过mid，则袋子数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌈</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌉</mo></mrow><annotation encoding="application/x-tex">\lceil \frac{num}{mid} \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.095em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mopen">⌈</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌉</span></span></span></span>，而对应的操作次数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌈</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌉</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lceil \frac{num}{mid} \rceil - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.095em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mopen">⌈</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span>。这里想插入一点其他内容，上取整与下取整等的数学公式的推导，还是放在后面弄个附录吧。而编程语言中的除法操作一般是下取整除法，所以还需要进行转换，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌈</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌉</mo><mo>−</mo><mn>1</mn><mo>=</mo><mo>⌊</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lceil \frac{num}{mid} \rceil - 1 = \lfloor \frac{num - 1}{mid} \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mopen">⌈</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mrel">=</span><span class="mopen">⌊</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span>。因此将含有num个小球的袋子进行拆分使得每个袋子中的小球不超过mid所需的操作次数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{num-1}{mid}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>下取整。</p><p>接下来在区间[1, M]遍历mid（M为nums中最大值），具体步骤为：</p><ol><li>初始化左边界left=1，有边界right=M</li><li>在每次循环中，mid = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mfrac><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>+</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor \frac{left+right}{2} \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9322159999999999em;"></span><span class="strut bottom" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mopen">⌊</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.44610799999999995em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mathit">t</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span>，计算总的操作次数是否≤maxOperations</li><li>如果满足条件则尝试更小的mid即right=mid，否则需要增大mid即left=mid+1</li><li>当left≥right时，返回right即可</li></ol><p>按照上述步骤可得C++实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumSize</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> maxOperations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">1</span>, right = *<span class="built_in">max_element</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;num: nums) &#123;</span><br><span class="line">                cur = cur + (num - <span class="number">1</span>) / mid;</span><br><span class="line">                <span class="keyword">if</span> (cur &gt; maxOperations)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur &lt;= maxOperations)</span><br><span class="line">                right = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>复杂度分析</h1><h2 id="时间复杂度">时间复杂度</h2><p>外层循环是二分搜索，复杂度为O(log M)（M为nums中的最大值）；内层循环的复杂度为O(n)（n为nums中元素个数），总的时间复杂度为O(n log M)。</p><h2 id="空间复杂度">空间复杂度</h2><p>使用常数个遍历，空间复杂度为O(1)。</p><h1>附录</h1><h2 id="1-lceil-frac-num-mid-rceil-1-lfloor-frac-num-mid-rfloor-吗">1. $ \lceil \frac{num}{mid} \rceil - 1== \lfloor \frac{num}{mid} \rfloor$ 吗</h2><h3 id="情况-1：-frac-num-mid-是整数">情况 1：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{num}{mid}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>是整数</h3><ul><li>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>=</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">\frac{num}{mid} = k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>，其中k是整数</li><li>上取整后减1：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌈</mo><mi>k</mi><mo>⌉</mo><mo>−</mo><mn>1</mn><mo>=</mo><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lceil k \rceil - 1 = k -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">⌈</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mclose">⌉</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span>​</li><li>下取整：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mi>k</mi><mo>⌋</mo><mo>=</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">\lfloor k \rfloor = k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">⌊</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mclose">⌋</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>​</li><li>结论不相等</li></ul><h3 id="情况-2：-frac-num-mid-不是整数">情况 2：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{num}{mid}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>不是整数</h3><ul><li>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>=</mo><mi>k</mi><mo>+</mo><mi>f</mi></mrow><annotation encoding="application/x-tex">\frac{num}{mid} = k + f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span></span></span></span>，其中k是整数，0 &lt; f &lt; 1</li><li>上取整后减1：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌈</mo><mi>k</mi><mo>+</mo><mi>f</mi><mo>⌉</mo><mo>−</mo><mn>1</mn><mo>=</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo>−</mo><mn>1</mn><mo>=</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">\lceil k + f \rceil - 1 = k + 1 - 1 = k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">⌈</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mclose">⌉</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>​</li><li>下取整：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mi>k</mi><mo>+</mo><mi>f</mi><mo>⌋</mo><mo>=</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">\lfloor k + f \rfloor = k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">⌊</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mclose">⌋</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>​</li><li>结论相等</li></ul><p>因此$ \lceil \frac{num}{mid} \rceil - 1== \lfloor \frac{num}{mid} \rfloor$不成立。</p><h2 id="2-lceil-frac-num-mid-rceil-1-lfloor-frac-num-1-mid-rfloor">2. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌈</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌉</mo><mo>−</mo><mn>1</mn><mo>=</mo><mo>⌊</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lceil \frac{num}{mid} \rceil - 1= \lfloor \frac{num-1}{mid} \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mopen">⌈</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mrel">=</span><span class="mopen">⌊</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></h2><p>设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>=</mo><mi>k</mi><mo>+</mo><mi>f</mi></mrow><annotation encoding="application/x-tex">\frac{num}{mid}=k+f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span></span></span></span>，其中k为整数部分，f为小数部分，0≤f&lt;1。</p><ul><li>若f=0，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌈</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌉</mo><mo>=</mo><mo>⌈</mo><mi>k</mi><mo>+</mo><mi>f</mi><mo>⌉</mo><mo>=</mo><mo>⌈</mo><mi>k</mi><mo>⌉</mo><mo>=</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">\lceil \frac{num}{mid} \rceil=\lceil k+f \rceil = \lceil k \rceil = k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.095em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mopen">⌈</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mrel">=</span><span class="mopen">⌈</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mclose">⌉</span><span class="mrel">=</span><span class="mopen">⌈</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mclose">⌉</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span></li><li>若f&gt;0，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌈</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌉</mo><mo>=</mo><mo>⌈</mo><mi>k</mi><mo>+</mo><mi>f</mi><mo>⌉</mo><mo>=</mo><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lceil \frac{num}{mid} \rceil=\lceil k+f \rceil = k+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.095em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mopen">⌈</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mrel">=</span><span class="mopen">⌈</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mclose">⌉</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span></li></ul><p>通过变形可以统一上述两种情况，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>+</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>=</mo><mi>k</mi><mo>+</mo><mi>f</mi><mo>+</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{num+mid-1}{mid}=k+f+1-\frac{1}{mid}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8801079999999999em;"></span><span class="strut bottom" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mbin">+</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><ul><li>若f=0，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>+</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>=</mo><mi>k</mi><mo>+</mo><mi>f</mi><mo>+</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>=</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{num+mid-1}{mid}=k+f+1-\frac{1}{mid}=k+1-\frac{1}{mid}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8801079999999999em;"></span><span class="strut bottom" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mbin">+</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>，下取整为k</li><li>若f&gt;0，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>+</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>=</mo><mi>k</mi><mo>+</mo><mi>f</mi><mo>+</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>=</mo><mi>k</mi><mo>+</mo><mi>f</mi><mo>+</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{num+mid-1}{mid}=k+f+1-\frac{1}{mid}=k+f+1-\frac{1}{mid}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8801079999999999em;"></span><span class="strut bottom" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mbin">+</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>，下取整为k+1</li></ul><p>因此<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌈</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌉</mo><mo>=</mo><mo>⌊</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>+</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lceil \frac{num}{mid} \rceil = \lfloor\frac{num+mid-1}{mid}\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8801079999999999em;"></span><span class="strut bottom" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mopen">⌈</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mrel">=</span><span class="mopen">⌊</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mbin">+</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span>。下取整函数有性质<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo>⌋</mo><mo>=</mo><mo>⌊</mo><mi>x</mi><mo>⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lfloor x + 1 \rfloor = \lfloor x \rfloor + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">⌊</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">⌋</span><span class="mrel">=</span><span class="mopen">⌊</span><span class="mord mathit">x</span><span class="mclose">⌋</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span>，因此<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>+</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌋</mo><mo>=</mo><mo>⌊</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>+</mo><mn>1</mn><mo>⌋</mo><mo>=</mo><mo>⌊</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lfloor\frac{num+mid-1}{mid}\rfloor=\lfloor\frac{num-1}{mid}+1\rfloor=\lfloor\frac{num-1}{mid}\rfloor+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8801079999999999em;"></span><span class="strut bottom" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mopen">⌊</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mbin">+</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌋</span><span class="mrel">=</span><span class="mopen">⌊</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">⌋</span><span class="mrel">=</span><span class="mopen">⌊</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌋</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span>，继而可得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌈</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌉</mo><mo>−</mo><mn>1</mn><mo>=</mo><mo>⌊</mo><mfrac><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow></mfrac><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lceil \frac{num}{mid} \rceil - 1= \lfloor\frac{num-1}{mid}\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mopen">⌈</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mrel">=</span><span class="mopen">⌊</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里想谈谈之前写Leetcode 每日一题文章的顺序，我基本上是先把代码放上去，然后将代码进行详细讲解。感觉这种方法不合适，因为是先有思路然后有代码。先代码后思路显然是本末倒置了，这一点要改改。&lt;/p&gt;
&lt;p&gt;今日的Leetcode每日一题为&lt;a href=&quot;https:/</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="数组" scheme="http://malone-ai.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="二分查找" scheme="http://malone-ai.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 每日一题九：128. 最长连续序列</title>
    <link href="http://malone-ai.github.io/2025/02/08/leetcode9/"/>
    <id>http://malone-ai.github.io/2025/02/08/leetcode9/</id>
    <published>2025-02-08T03:29:24.000Z</published>
    <updated>2025-02-15T14:14:26.347Z</updated>
    
    <content type="html"><![CDATA[<p>今日的Leetcode每日一题为<a href="https://leetcode.cn/problems/longest-consecutive-sequence/description/">128. 最长连续序列</a>。</p><h1>分析理解</h1><p>题目给一个未排序的整数数组，要求我们找出一个最长的连续的子序列，当然不需要求这个子序列是什么，只需要求出他的长度。题目要求使用时间复杂度为O(n)的算法。</p><h1>思路分析</h1><p>由于题目要求使用时间复杂度为O(n)的算法，故排序是不可能用的了，因为排序的复杂度最低也为O(n log n)。但是提交完题解后发现，最快的方法竟然是排序，给我震惊呆住了。可能是官方的例子比较特殊等原因吧。不过接着看灵神给出的哈希表的方法。</p><p>首先将数组用哈希表去重，将数组转换为哈希集合即没有重复元素的集合。然后开始遍历哈希集合。</p><p>遍历的时候，对于每一个元素x：</p><ul><li>如果x-1存在于哈希集合中，就跳过当前元素；</li><li>如果x-1不存在与哈希集合中，就开始记录从x开始的连续子序列的长度。就是依次遍历x+1、x+2、x+3，…</li></ul><p>x-1存在于哈希集合时，跳过当前元素是因为最长连续子序列的长度一定不从x开始，可能从x-1、也可能从x-2开始，但不会是从x开始。这就是基本思路了，直接给出C++代码，下次试试用Rust：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestConsecutive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">hash</span><span class="params">(nums.begin(), nums.end())</span></span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i: hash) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash.<span class="built_in">count</span>(i<span class="number">-1</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            hash.<span class="built_in">insert</span>(i);</span><br><span class="line">            <span class="type">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (hash.<span class="built_in">count</span>(j))</span><br><span class="line">                j++;</span><br><span class="line">            res = <span class="built_in">max</span>(j - i, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今日的Leetcode每日一题为&lt;a href=&quot;https://leetcode.cn/problems/longest-consecutive-sequence/description/&quot;&gt;128. 最长连续序列&lt;/a&gt;。&lt;/p&gt;
&lt;h1&gt;分析理解&lt;/h1&gt;
&lt;p&gt;题目</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="数组" scheme="http://malone-ai.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="哈希表" scheme="http://malone-ai.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="并查集" scheme="http://malone-ai.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode每日一题八：59. 螺旋矩阵 II</title>
    <link href="http://malone-ai.github.io/2025/02/07/leetcode8/"/>
    <id>http://malone-ai.github.io/2025/02/07/leetcode8/</id>
    <published>2025-02-07T12:32:27.000Z</published>
    <updated>2025-02-12T10:02:28.988Z</updated>
    
    <content type="html"><![CDATA[<p>今日Leetcode每日一题为<a href="https://leetcode.cn/problems/spiral-matrix-ii/description/">59. 螺旋矩阵 II</a>。</p><p>本题参考大神Krahets的解法，这种解法最便于理解。Krahets的基本思路是依次填充上边界、右边界、下边界和左边界，每次填充完边界后，对填充的边界进行压缩，见代码中的t++、r–、b–、l++，直到填充完毕为止。以下是他的Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>, t = <span class="number">0</span>, b = n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[][] mat = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>, tar = n * n;</span><br><span class="line">        <span class="keyword">while</span>(num &lt;= tar)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l; i &lt;= r; i++) mat[t][i] = num++; <span class="comment">// left to right.</span></span><br><span class="line">            t++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> t; i &lt;= b; i++) mat[i][r] = num++; <span class="comment">// top to bottom.</span></span><br><span class="line">            r--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> r; i &gt;= l; i--) mat[b][i] = num++; <span class="comment">// right to left.</span></span><br><span class="line">            b--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> b; i &gt;= t; i--) mat[i][l] = num++; <span class="comment">// bottom to top.</span></span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：Krahets</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/spiral-matrix-ii/solutions/12594/spiral-matrix-ii-mo-ni-fa-she-ding-bian-jie-qing-x/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>参考其Java代码给出C++代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">matrix</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>, up = <span class="number">0</span>, down = n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &lt;= n * n) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i++)</span><br><span class="line">                matrix[up][i] = num++;</span><br><span class="line">            up++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = up; i &lt;= down; i++)</span><br><span class="line">                matrix[i][right] = num++;</span><br><span class="line">            right--;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = right; i &gt;= left; i--)</span><br><span class="line">                matrix[down][i] = num++;</span><br><span class="line">            down--;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = down; i &gt;= up; i--)</span><br><span class="line">                matrix[i][left] = num++;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>复杂度</h1><p>时间复杂度和空间复杂度显而易见，为O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>)和O(1)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今日Leetcode每日一题为&lt;a href=&quot;https://leetcode.cn/problems/spiral-matrix-ii/description/&quot;&gt;59. 螺旋矩阵 II&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本题参考大神Krahets的解法，这种解法最便于理解。Kr</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="数组" scheme="http://malone-ai.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="矩阵" scheme="http://malone-ai.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
    <category term="模拟" scheme="http://malone-ai.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="回溯" scheme="http://malone-ai.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
    <category term="排序" scheme="http://malone-ai.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>data_structure1</title>
    <link href="http://malone-ai.github.io/2025/02/07/data-structure1/"/>
    <id>http://malone-ai.github.io/2025/02/07/data-structure1/</id>
    <published>2025-02-07T12:31:53.000Z</published>
    <updated>2025-02-07T12:31:53.211Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode 每日一题七：47. 全排列 II</title>
    <link href="http://malone-ai.github.io/2025/02/06/leetcode7/"/>
    <id>http://malone-ai.github.io/2025/02/06/leetcode7/</id>
    <published>2025-02-06T06:03:07.000Z</published>
    <updated>2025-02-12T10:02:20.983Z</updated>
    
    <content type="html"><![CDATA[<p>今日Leetcode每日一题为<a href="https://leetcode.cn/problems/permutations-ii/description/">47. 全排列 II</a>。拿到这道题一眼就想到算法课上的<code>生成排列</code>，当即就使用回溯算法解决，直接提交，直接报错。没注意到题目有条限制条件——存在重复元素。由于题目叫做<code>47. 全排列 II</code>，那我估计肯定存在<code>全排列 I</code>的题目，所有元素均不重复，一找还真有<a href="https://leetcode.cn/problems/permutations/description/">46. 全排列</a>。直接copy代码过去，提交运行，直接通过，爽歪歪。</p><h1>46. 全排列</h1><p>先看看不存在重复元素的<a href="https://leetcode.cn/problems/permutations/description/">46. 全排列</a>，这道题更简单，直接用生成排列的回溯算法，照着抄就行。</p><h2 id="思路分析">思路分析</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">path</span><span class="params">(nums)</span></span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">perm</span>(<span class="number">0</span>, path, res);</span><br><span class="line">        <span class="keyword">return</span> res;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">perm</span><span class="params">(<span class="type">int</span> i, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == path.<span class="built_in">size</span>())</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; path.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(path[j], path[i]);</span><br><span class="line">                <span class="built_in">perm</span>(i<span class="number">+1</span>, path, res);</span><br><span class="line">                <span class="built_in">swap</span>(path[j], path[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这部分递归要弄清楚执行过程。permute是主函数，接受一个整数数组nums的输入，path是nums的一个副本，用于存放当前遍历到的排列，res用于存放所有排列，perm是一个递归函数，通过调用perm(0, path, res)来从索引0开始生成排列。然后是perm的不断递归调用。</p><p>然后看perm函数的具体执行过程，首先是if条件判断，只有当i与path.size()相等时才会执行，一般先执行else里的内容。else包括一个循环，对于当前位置i，遍历从i到path.size()-1的所有位置j，每次遍历过程中交换path[j]与path[i]，相当于将path[j]交换到当前的位置i处。然后递归调用perm(i+1, path, res)，处理下一个位置i+1，然后回溯即将path[j]与path[i]交换回来。</p><h3 id="例子">例子</h3><p>看一个例子[1, 2, 3]。<br>1.初始调用perm(0, [1, 2, 3], res)。<br>2.在perm(0, [1, 2, 3], res)中i = 0不等于path.size()，执行else中的for循环，i = 0，遍历j从0到2：</p><ul><li>j = 0，交换path[j]与path[i]即path[0]与path[0]，path仍为[1, 2, 3]，递归调用perm(1, [1, 2, 3], res)：<ul><li>在perm(1, [1, 2, 3], res)中，i = 1不等于path.size()，执行else中的for循环，遍历j从1到2：<ul><li>j = 1，交换path[j]与path[i]即path[1]和path[1]，path仍为[1, 2, 3]，递归调用perm(2, [1, 2, 3], res)：<ul><li>在perm(2, [1, 2, 3], res)中，i = 2，遍历j从2到2：<ul><li>j = 2，交换path[j]与path[i]即path[2]与path[2]，res仍为[1, 2, 3]，递归调用perm(3, [1, 2, 3], res)：<ul><li>在perm(3, [1, 2, 3], res)中，i = 3等于path.size()，满足if条件，执行<code>res.push_back([1, 2, 3])</code>，然后回溯。</li></ul></li><li>j = 2，交换path[j]与path[i]即path[2]与path[2]（此时的交换对应上方的交换，这里的交换应该叫做换回），path仍为[1, 2, 3]，回溯。</li></ul></li></ul></li><li>j = 1，交换path[j]与path[i]即path[1]和path[1]（此时的交换为换回），path为[1, 2, 3]，回溯。</li><li>j = 2，交换path[j]与path[i]即path[2]与path[1]，path为[1, 3, 2]，递归调用perm(2, [1, 3, 2], res)：<ul><li>在perm(2, [1, 3, 2], res)中，i = 2，执行else中的for循环，遍历j从2到2：<ul><li>j = 2，交换path[j]与path[i]即path[2]与path[2]，res仍为[1, 3, 2]，递归调用perm(3, [1, 3, 2], res)：<ul><li>在perm(3, [1, 3, 2], res)中，i = 3等于path.size()，满足if条件，执行<code>res.push_back([1, 3, 2])</code>，然后回溯。</li></ul></li><li>j = 2，交换path[j]与path[i]即path[2]与path[2]（此时的交换对应上方的交换，这里的交换应该叫做换回），path为[1, 3, 2]，回溯。</li></ul></li></ul></li><li>j = 2，交换path[j]与path[i]即path[2]和path[1]（此时的交换为换回），path为[1, 2, 3]，回溯。</li></ul></li></ul></li><li>j = 0，交换path[j]与path[i]即path[0]与path[0]（换回），path为[1, 2, 3]，回溯。</li><li>j = 1，交换path[j]与path[i]即path[1]与path[0]，path为[2, 1, 3]，递归调用perm(1, [2, 1, 3], res)：<ul><li>在perm(1, [2, 1, 3], res)中，i = 1不等于path.size()，执行else中的for循环，遍历j从1到2<ul><li>j = 1，交换path[j]与path[i]即path[1]和path[1]，path仍为[2, 1, 3]，递归调用perm(2, [2, 1, 3], res)：<ul><li>在perm(2, [2, 1, 3], res)中，i = 2，遍历j从2到2：<ul><li>j = 2，交换path[j]与path[i]即path[2]与path[2]，res仍为[2, 1, 3]，递归调用perm(3, [2, 1, 3], res)：<ul><li>在perm(3, [2, 1, 3], res)中，i = 3等于path.size()，满足if条件，执行<code>res.push_back([2, 1, 3])</code>，然后回溯。</li></ul></li><li>j = 2，交换path[j]与path[i]即path[2]与path[2]（此时的交换对应上方的交换，这里的交换应该叫做换回），path仍为[2, 1, 3]，回溯。</li></ul></li></ul></li><li>j = 1，交换path[j]与path[i]即path[1]和path[1]（此时的交换为换回），path为[2, 1, 3]，回溯。</li><li>j = 2，交换path[j]与path[i]即path[2]与path[1]，res为[2, 3, 1]，递归调用perm(2, [2, 3, 1], res)：<ul><li>在perm(2, [2, 3, 1], res)中，i = 2，执行else中的for循环，遍历j从2到2：<ul><li>j = 2，交换path[j]与path[i]即path[2]与path[2]，res仍为[2, 3, 1]，递归调用perm(3, [2, 3, 1], res)：<ul><li>在perm(3, [2, 3, 1], res)中，i = 3等于path.size()，满足if条件，执行<code>res.push_back([2, 3, 1])</code>，然后回溯。</li></ul></li><li>j = 2，交换path[j]与path[i]即path[2]与path[2]（此时的交换对应上方的交换，这里的交换应该叫做换回），path为[2, 3, 1]，回溯。</li></ul></li></ul></li><li>j = 2，交换path[j]与path[i]即path[2]和path[1]（此时的交换为换回），path为[2, 1, 3]，回溯。</li></ul></li></ul></li><li>j = 1，交换path[j]与path[i]即path[1]与path[0]（换回），path为[1, 2, 3]，回溯。</li><li>j = 2，交换path[j]与path[i]即path[2]与path[0]，path为[3, 2, 1]，递归调用perm(1, [3, 2, 1], res)：<ul><li>在perm(1, [3, 2, 1], res)中，i = 1不等于path.size()，执行else中的for循环，遍历j从1到2<ul><li>j = 1，交换path[j]与path[i]即path[1]和path[1]，path仍为[3, 2, 1]，递归调用perm(2, [3, 2, 1], res)：<ul><li>在perm(2, [3, 2, 1], res)中，i = 2，遍历j从2到2：<ul><li>j = 2，交换path[j]与path[i]即path[2]与path[2]，res仍为[3, 2, 1]，递归调用perm(3, [3, 2, 1], res)：<ul><li>在perm(3, [2, 3, 1], res)中，i = 3等于path.size()，满足if条件，执行<code>res.push_back([3, 2, 1])</code>，然后回溯。</li></ul></li><li>j = 2，交换path[j]与path[i]即path[2]与path[2]（此时的交换对应上方的交换，这里的交换应该叫做换回），path仍为[3, 2, 1]，回溯。</li></ul></li></ul></li><li>j = 1，交换path[j]与path[i]即path[1]和path[1]（此时的交换为换回），path为[3, 2, 1]，回溯。</li><li>j = 2，交换path[j]与path[i]即path[2]与path[1]，res为[3, 1, 2]，递归调用perm(2, [3, 1, 2], res)：<ul><li>在perm(2, [3, 1, 2], res)中，i = 2，执行else中的for循环，遍历j从2到2：<ul><li>j = 2，交换path[j]与path[i]即path[2]与path[2]，res仍为[3, 1, 2]，递归调用perm(3, [3, 1, 2], res)：<ul><li>在perm(3, [2, 3, 1], res)中，i = 3等于path.size()，满足if条件，执行<code>res.push_back([3, 1, 2])</code>，然后回溯。</li><li>j = 2，交换path[j]与path[i]即path[2]与path[2]（此时的交换对应上方的交换，这里的交换应该叫做换回），path为[3, 1, 2]，回溯。</li></ul></li></ul></li></ul></li><li>j = 2，交换path[j]与path[i]即path[2]和path[1]（此时的交换为换回），path为[3, 2, 1]，回溯。</li></ul></li></ul></li><li>j = 2，交换path[j]与path[i]即path[2]与path[0]（换回），path为[1, 2, 3]，回溯。<br>3.perm递归执行结束，回到permute函数，此时的res为:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [1, 2, 3],</span><br><span class="line">    [1, 3, 2],</span><br><span class="line">    [2, 1, 3],</span><br><span class="line">    [2, 3, 1],</span><br><span class="line">    [3, 2, 1],</span><br><span class="line">    [3, 1, 2],</span><br><span class="line">]</span><br><span class="line">```   </span><br><span class="line">上述讲解可能比较啰嗦，看这个示意图应该更好理解：</span><br></pre></td></tr></table></figure><p>开始: [1, 2, 3]<br>|<br>±- [1, 2, 3] (i=0, j=0)<br>|      |<br>|      ±- [1, 2, 3] (i=1, j=1)<br>|      |      |<br>|      |      ±- [1, 2, 3] (i=2, j=2) -&gt; 加入结果集<br>|      |<br>|      ±- [1, 3, 2] (i=1, j=2)<br>|             |<br>|             ±- [1, 3, 2] (i=2, j=2) -&gt; 加入结果集<br>|<br>±- [2, 1, 3] (i=0, j=1)<br>|      |<br>|      ±- [2, 1, 3] (i=1, j=1)<br>|      |      |<br>|      |      ±- [2, 1, 3] (i=2, j=2) -&gt; 加入结果集<br>|      |<br>|      ±- [2, 3, 1] (i=1, j=2)<br>|             |<br>|             ±- [2, 3, 1] (i=2, j=2) -&gt; 加入结果集<br>|<br>±- [3, 2, 1] (i=0, j=2)<br>|<br>±- [3, 2, 1] (i=1, j=1)<br>|      |<br>|      ±- [3, 2, 1] (i=2, j=2) -&gt; 加入结果集<br>|<br>±- [3, 1, 2] (i=1, j=2)<br>|<br>±- [3, 1, 2] (i=2, j=2) -&gt; 加入结果集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 复杂度分析</span><br><span class="line">### 时间复杂度</span><br><span class="line">n个元素有n!个排列，而生成每个排列的时间为O(n)，故总的时间复杂度为O(n$\times$n!)。</span><br><span class="line">### 空间复杂度</span><br><span class="line">递归深度为n，空间复杂度主要来源于递归栈，为O(n)。</span><br><span class="line"></span><br><span class="line"># 47. 全排列 II</span><br><span class="line">## 思路分析</span><br><span class="line">[46. 全排列](https://leetcode.cn/problems/permutations/description/)使用的是递归交换法，当处理到位置i的时候，将i和后面的每一个元素进行交换，然后递归处理位置i+1。比如对于nums=[1, 2, 3]，i=0的时候，遍历j从0到2，交换1和1、1和2、1和3；依照上述方法能产生全排列。但当有重复元素时，就会出现重复的情况，比如对于nums=[1, 1, 2]，i=0的时候，遍历j从0到2，交换1和1、1和1、1和2，交换后的nums是一样的，这就会导致后续产生重复的序列。</span><br><span class="line"></span><br><span class="line">所以，问题在于如何避免处理相同的元素。这里使用一个哈希表记录已经交换过的元素，在每次遍历交换前，先查找其是否已经交换过，交换过的元素就跳过交换。比如对于nums=[1, 1, 2]，i=0时，遍历j从0到2，交换1和1、1和1、1和2，但是交换前，先查找其是否已经交换过，第一次交换1和1时，1不在哈希表中，所以进行交换；第二次交换1和1的时候，1已经在哈希表中，直接跳过；交换1和2的时候，2不在哈希表中，故进行交换。最终本轮产生的序列从原来的[1, 1, 2]、[1, 1, 2]、[2, 1, 1]变成[1, 1, 2]、[2, 1, 1]。</span><br><span class="line"></span><br><span class="line">下面是C++实现：</span><br><span class="line">```cpp</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; permuteUnique(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; res;</span><br><span class="line">        vector&lt;int&gt; path(nums);</span><br><span class="line">        perm(0, path, res);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    void perm(int i, vector&lt;int&gt;&amp; path, vector&lt;vector&lt;int&gt;&gt; &amp;res) &#123;</span><br><span class="line">        if (i == path.size())</span><br><span class="line">            res.push_back(path);</span><br><span class="line">        else &#123;</span><br><span class="line">            unordered_set&lt;int&gt; used;</span><br><span class="line">            for (int j = i; j &lt; path.size(); ++j) &#123;</span><br><span class="line">                if (used.count(path[j]))</span><br><span class="line">                    continue;</span><br><span class="line">                used.insert(path[j]);</span><br><span class="line">                swap(path[j], path[i]);</span><br><span class="line">                perm(i+1, path, res);</span><br><span class="line">                swap(path[j], path[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析">复杂度分析</h2><h3 id="时间复杂度">时间复杂度</h3><p>有重复元素时，时间复杂度的上限依然不变，所以时间复杂度为O(n<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.58333em;"></span><span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord">×</span></span></span></span>n!)。其实可以更精确，实际生成的排列数为M=\frac{n!}{k_1!·k_2!·...·k_m!}，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">k_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03148em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>是第i个重复元素出现的次数，时间复杂度为O(n<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.58333em;"></span><span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord">×</span></span></span></span>M)。</p><h3 id="空间复杂度">空间复杂度</h3><p>空间复杂度依然为O(n)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今日Leetcode每日一题为&lt;a href=&quot;https://leetcode.cn/problems/permutations-ii/description/&quot;&gt;47. 全排列 II&lt;/a&gt;。拿到这道题一眼就想到算法课上的&lt;code&gt;生成排列&lt;/code&gt;，当即就使用回</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="数组" scheme="http://malone-ai.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="哈希表" scheme="http://malone-ai.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="回溯" scheme="http://malone-ai.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
    <category term="排序" scheme="http://malone-ai.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 每日一题六：90. 子集 II</title>
    <link href="http://malone-ai.github.io/2025/02/05/leetcode6/"/>
    <id>http://malone-ai.github.io/2025/02/05/leetcode6/</id>
    <published>2025-02-05T09:41:44.000Z</published>
    <updated>2025-02-12T10:02:11.711Z</updated>
    
    <content type="html"><![CDATA[<p>今日Leetcode每日一题为<a href="https://leetcode.cn/problems/subsets-ii/description/">90. 子集 II</a>。</p><h1>思路分析</h1><p>题目很好理解，基本思路是使用回溯法进行解决。这种方法其实是参考沙特的M. H. Alsuwaiyel的《算法设计技巧与分析》的生成排列算法，直接照着伪代码抄就行。由于数组中存在重复元素，因此先对其进行排序，方便排除重复元素。下面给出C++实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">backtrack</span>(nums, <span class="number">0</span>, path, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> cur, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = cur; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; cur &amp;&amp; nums[i] == nums[i<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(nums, i<span class="number">+1</span>, path, res);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>backtrack</code>函数是核心，它接受四个参数，输入数组、当前遍历到的数的下标cur、当前子集path以及输出数组。一开始时创建了一个path数组，其为空。</p><p>然后调用backtrack函数<code>backtrack(nums, 0, path, res)</code>。在backtrack函数中，先将path压入res中，此时path为空集，因而空集被包含进去了。然后进入循环体内部，每次循环先检查当前遍历元素是否是当前元素即<code>i &gt; start</code>，如果是则检查当前遍历元素是否与上一个元素相同即<code>nums[i] == nums[i-1]</code>，如果相同则跳过当前遍历元素，遍历下一个元素。这里说了一个当前遍历元素和当前元素，感觉容易让人混淆。当前元素即backtrack里参数cur对应下标的元素，而当前遍历元素是在backtrack函数内部的for循环体中遍历到的元素的下标。上述由代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; start &amp;&amp; nums[i] == nums[i<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>实现，用于排除重复元素。当前遍历元素是当前元素或者当前遍历元素与上一个元素不同时执行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line"><span class="built_in">backtrak</span>(nums, i<span class="number">+1</span>, path, res);</span><br></pre></td></tr></table></figure><p>path.push_back(nums[i])实现将选择当前遍历元素，然后调用backtrack函数，而backtrack函数所执行的第一件事是<code>res.push_back(path)</code>，也就是将一个子集压入了输出数组中。</p><p>回溯法的整个过程是从空集开始每次增加一个元素，并压入到输出数组中，直到nums数组中所有元素都包含进path中为止。然后开始回溯。用例子解释或许更直观。假设nums为[1,2,3,3,4]，则压入到输出数组中的子集依次为[]、[1]、[1、2]、[1、2、3]、[1、2、3、3]、[1、2、3、3、5]，此时已经将所有元素压入path中，最深一层的backtrack函数内先将[1、2、3、3、5]压入到res中，然后执行for (i = start; i &lt; nums.size(); i++)，但此时i = nums.size()故进入for循环时不满足i &lt; nums.size()直接退出循环后回溯。回溯后将最后一个元素弹出，path变为[1,2,3,3]。然后退出循环体回溯，再将最后一个元素弹出，path变为[1,2,3]。此时还满足循环条件将元素5压入path，path变为[1,2,3,5]。然后调用backtrack函数。接下来path依次变化为[1,2,5]、[1,3,3]、[1,3,3,5]、[1,5]。。。</p><h1>复杂度分析</h1><h2 id="时间复杂度">时间复杂度</h2><p>对于一个大小为n的数组，子集的长度为0~n。每次递归调用将path的副本加入到res中，每次将子集复制到输出数组中所需时间与子集的长度有关，但上界不变，因此将一个子集复制到输出数组的时间复杂度为O(n)。而输入数组的大小为n，如果不存在重复元素，也就是最坏情况，此时子集的数量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.664392em;"></span><span class="strut bottom" style="height:0.664392em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>。而当存在重复元素时，虽然可以通过剪枝操作减少递归调用的次数，但是执行次数的上界依然为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.664392em;"></span><span class="strut bottom" style="height:0.664392em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>。因此时间复杂度为O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">n\times 2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.664392em;"></span><span class="strut bottom" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">×</span><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>)。</p><h2 id="空间复杂度">空间复杂度</h2><p>在整个过程中，使用的空间主要是递归调用栈，其最大深度可以达到O(n)，即使在存在重复元素时其上界依然保持不变。因此空间复杂度为O(n)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今日Leetcode每日一题为&lt;a href=&quot;https://leetcode.cn/problems/subsets-ii/description/&quot;&gt;90. 子集 II&lt;/a&gt;。&lt;/p&gt;
&lt;h1&gt;思路分析&lt;/h1&gt;
&lt;p&gt;题目很好理解，基本思路是使用回溯法进行解决。这</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="数组" scheme="http://malone-ai.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="回溯" scheme="http://malone-ai.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 每日一题五：922. 按奇偶排序数组 II</title>
    <link href="http://malone-ai.github.io/2025/02/04/leetcode5/"/>
    <id>http://malone-ai.github.io/2025/02/04/leetcode5/</id>
    <published>2025-02-04T05:21:11.000Z</published>
    <updated>2025-02-12T10:02:02.372Z</updated>
    
    <content type="html"><![CDATA[<p>今日Leetcode每日一题为<a href="https://leetcode.cn/problems/sort-array-by-parity-ii/description/">922. 按奇偶排序数组 II</a>。</p><p>这道题比较简单，仅仅做一个记录。时间复杂度为O(n), 空间复杂度为O(1)。<br>以下是C++实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArrayByParityII</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x: nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                res[i] = x;</span><br><span class="line">                i += <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[j] = x;</span><br><span class="line">                j += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今日Leetcode每日一题为&lt;a href=&quot;https://leetcode.cn/problems/sort-array-by-parity-ii/description/&quot;&gt;922. 按奇偶排序数组 II&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这道题比较简单，仅仅做一个记录。时间</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="数组" scheme="http://malone-ai.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="双指针" scheme="http://malone-ai.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 每日一题四：680. 验证回文串 II</title>
    <link href="http://malone-ai.github.io/2025/02/03/leetcode4/"/>
    <id>http://malone-ai.github.io/2025/02/03/leetcode4/</id>
    <published>2025-02-03T03:24:44.000Z</published>
    <updated>2025-02-12T16:10:59.667Z</updated>
    
    <content type="html"><![CDATA[<p>今日Leecode每日一题为<a href="https://leetcode.cn/problems/valid-palindrome-ii/description/">680. 验证回文串 II</a>。</p><h1>思路分析</h1><p>提供一个字符串s，最多可以删除一个字符，如果s能成为回文串，返回true，否则返回false。先给出C++实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkPalindrome</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = low, j = high;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != s[j])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">validPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[low] == s[high]) &#123;</span><br><span class="line">                ++low;</span><br><span class="line">                --high;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">checkPalindrome</span>(s, low, high - <span class="number">1</span>) || <span class="built_in">checkPalindrome</span>(s, low + <span class="number">1</span>, high);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中validPalindrome函数是要实现的函数，checkPalindrome函数是辅助函数。辅助函数checkPalindrome函数接收三个参数：字符串s、整型数low和high，检查字符串s从下标low到high之间的字符串是否是回文串。</p><p>validPalindrome函数使用low和high两个指针，初始化时low = 0, high = s.size() - 1。然后进入while循环，检查s[low] == s[high]是否成立，如果成立则low自增1、high自减1。如果不成立则需要删除s[low]或者s[high]，由于最多删除一个字符，所以直接返回删除s[low]或者s[high]后的结果就行即checkPalindrome(s, low, high - 1) || checkPalindrome(s, low + 1, high)。</p><p>看一个例子’abca’，开始时low=0， high = 3，s[low] == s[high]成立，low++得low=1,high–得high=2，此时s[low] == s[high]不成立，因此调用checkPalindrome(s, low+1, high)和checkPalindrome(s, low, high-1)，前者删除s[low]，后者删除s[high]，low+1=2,high=2，因此前者为true，因为是<code>||</code>符号，此时就直接返回true。如果执行后者，high-1=1，low=1，因此后者也为true。也就是说对于字符串’abca’，删除s[1]变成’aca’和删除s[2]变成’aba’都可以使其变成回文串。</p><h1>复杂度分析</h1><h2 id="时间复杂度">时间复杂度</h2><p>如果s是回文串，则不调用checkPalindrome函数，循环执行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>次，此时时间复杂度为O(n)。<br>如果s不是回文串，假设执行第k次时需要删除字符时，仍然需要检查剩余n-2k-1个字符，最多需要循环<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mo>−</mo><mn>2</mn><mi>k</mi><mo>−</mo><mn>1</mn></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n-2k-1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8801079999999999em;"></span><span class="strut bottom" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">2</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>次，并且需要调用checkPalindrome两次，k无论取何值，循环次数的上界依然为2 * n，因此时间复杂度为O(n)。</p><h2 id="空间复杂度">空间复杂度</h2><p>使用常数个变量，空间复杂度为O(1)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今日Leecode每日一题为&lt;a href=&quot;https://leetcode.cn/problems/valid-palindrome-ii/description/&quot;&gt;680. 验证回文串 II&lt;/a&gt;。&lt;/p&gt;
&lt;h1&gt;思路分析&lt;/h1&gt;
&lt;p&gt;提供一个字符串s，最多</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="贪心" scheme="http://malone-ai.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="双指针" scheme="http://malone-ai.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="字符串" scheme="http://malone-ai.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 每日一题三：598. 区间加法 II</title>
    <link href="http://malone-ai.github.io/2025/02/02/leetcode3/"/>
    <id>http://malone-ai.github.io/2025/02/02/leetcode3/</id>
    <published>2025-02-02T02:13:30.000Z</published>
    <updated>2025-02-12T10:01:33.244Z</updated>
    
    <content type="html"><![CDATA[<p>今日Leetcode的每日一题为<a href="https://leetcode.cn/problems/range-addition-ii/description/">598. 区间加法 II</a>。</p><h1>思路分析</h1><p>给一个整数m和一个整数n,对一个矩阵M，初始时矩阵中所有均为0。此外还提供一个操作数组ops，对于C++编程语言，提供的是一个二维vector数组vector&lt;vector<int>&gt;，通过for (auto&amp; op:ops)可以遍历该数组中的元素对，其中每个元素对op为一对数字(a,b)，执行将(0, 0)~(a-1, b-1)的所有元素进行加1操作。遍历完所有元素对后即执行完了操作，要求求出矩阵中最大的整数出现的次数。</p><p>使用模拟的方法的话即遍历操作数组ops对矩阵M进行操作后进行遍历统计，但这种方法的时间复杂度为O(mn)，空间复杂度为O(mn)，效率不高。</p><p>对于每次操作(a, b)影响的区域为(0, 0)~(a-1, b-1)，因而所有的操作共同影响的区域为这些区域的交集。只要求出所有的操作(a, b)中最小的a和最小的b即可，记作min_a和min_b，min_a和min_b决定了所有的操作共同影响的区域，最后很容易联想到最大整数出现的次数为<code>min_a * min_b</code>。</p><h1>复杂度分析</h1><p>这种方法主要是在遍历操作数组ops，ops为二维数组，设它为kX2的数组，那么时间复杂度为O(k)，k即操作的次数。使用了常数个变量，空间复杂度即O(1)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今日Leetcode的每日一题为&lt;a href=&quot;https://leetcode.cn/problems/range-addition-ii/description/&quot;&gt;598. 区间加法 II&lt;/a&gt;。&lt;/p&gt;
&lt;h1&gt;思路分析&lt;/h1&gt;
&lt;p&gt;给一个整数m和一个整数n</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="矩阵" scheme="http://malone-ai.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 每日一题二：81. 搜索旋转排序数组 II</title>
    <link href="http://malone-ai.github.io/2025/02/01/leetcode2/"/>
    <id>http://malone-ai.github.io/2025/02/01/leetcode2/</id>
    <published>2025-02-01T02:19:32.000Z</published>
    <updated>2025-02-12T10:01:04.326Z</updated>
    
    <content type="html"><![CDATA[<p>今日Leetcode的每日一题为<a href="https://leetcode.cn/problems/search-in-rotated-sorted-array-ii/description/">81. 搜索旋转排序数组 II</a>。</p><h1>思路分析</h1><p>这道题目大概意思是，原来有一个有序数组，按升序排列，但是该数组以一个未知下标进行了翻转，假如未知下标为k，那么数组从原来的下标[0,1,2,3,…,k,…n]变成了[k,k+1,k+2,…,n-1,0,1,2,3,…,k-1]。第一想法其实是遍历，虽然Leetcode官方并不会去排查你使用何种方法，但是咱们也不能拘泥于最简单的算法^o^。<br>Leetcode官方给该题的标签是二分查找，一直没明白是怎么个二分查找法？So我直接看的Leetcode官方题解，下面是Leetcode官方给的C++代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>] == target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[l] == nums[mid] &amp;&amp; nums[mid] == nums[r]) &#123;</span><br><span class="line">                ++l;</span><br><span class="line">                --r;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[l] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[l] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - <span class="number">1</span>]) &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/search-in-rotated-sorted-array-ii/solutions/704686/sou-suo-xuan-zhuan-pai-xu-shu-zu-ii-by-l-0nmp/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h2 id="特殊情况处理">特殊情况处理</h2><p>首先是对特殊情况的处理，Leetcode官方将数组中没有元素和一个元素进行了特殊处理。对于数组中没有元素时进行特殊处理是合理的，因为避免了对数组中元素的访问。而当数组中元素只有一个时没有必要进行特殊化处理，直接一般化处理即可。因为在初始化左指针和右指针时，另左指针为0，右指针为数组长度-1，在数组中只有一个元素时，左右指针均初始化为了0。此时中间元素也就是数组中的唯一元素，判断其是否为目标元素即可。</p><h2 id="一般情况">一般情况</h2><p>一般情况下进入一个while循环，并计算中间位置</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mfrac><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>+</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">mid=\frac{left+right}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em;"></span><span class="strut bottom" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">d</span><span class="mrel">=</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">2</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mathit">t</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">h</span><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span></p><p>并判断中间位置对应的元素是否为target。否则又分为三种情况：</p><ul><li>无法判断判断哪一部分有序</li><li>左半部分有序</li><li>右半部分有序</li></ul><h3 id="无法判断那一部分有序">无法判断那一部分有序</h3><p>无法判断判断哪一部分有序即nums[l] == nums[mid] &amp;&amp; nums[mid] == nums[r]。此时同时缩小左右指针即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l++</span><br><span class="line">r--</span><br></pre></td></tr></table></figure><h3 id="左半部分有序">左半部分有序</h3><p>左半部分有序，即nums[l] &lt;= nums[mid]，先判断target是否在左半部分；此时又分两种情况：</p><ul><li>target在左半部分</li><li>target不在左半部分</li></ul><p>条件nums[l] &lt;= target &amp;&amp; target &lt; nums[mid]即target在左半部分，此时令右指针r = mid - 1以缩小范围，否则令l = mid + 1。</p><h3 id="右半部分有序">右半部分有序</h3><p>排查无法判断哪一部分有序和左半部分有序即右半部分有序，此时类似与左半部分有序，也分两种情况：</p><ul><li>target在右半部分</li><li>target不在右半部分</li></ul><h2 id="复杂度分析">复杂度分析</h2><h3 id="时间复杂度">时间复杂度</h3><p>在一般情况下，二分查找的时间复杂度是O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">logn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">n</span></span></span></span>)。<br>而当数组中出现大量重复元素时，并且都不与target相等时，退化为线性搜索，每一次循环都执行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l++</span><br><span class="line">r--</span><br></pre></td></tr></table></figure><p>循环次数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>次，时间复杂度为O(n)。</p><h3 id="空间复杂度">空间复杂度</h3><p>使用常数个变量，空间复杂度为O(1)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今日Leetcode的每日一题为&lt;a href=&quot;https://leetcode.cn/problems/search-in-rotated-sorted-array-ii/description/&quot;&gt;81. 搜索旋转排序数组 II&lt;/a&gt;。&lt;/p&gt;
&lt;h1&gt;思路分析&lt;/</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="二分查找" scheme="http://malone-ai.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 每日一题一：541. 反转字符串 II</title>
    <link href="http://malone-ai.github.io/2025/01/31/leetcode1/"/>
    <id>http://malone-ai.github.io/2025/01/31/leetcode1/</id>
    <published>2025-01-31T02:48:59.000Z</published>
    <updated>2025-02-12T10:03:36.038Z</updated>
    
    <content type="html"><![CDATA[<p>从12月份开始到现在陆陆续续参加了几次Leetcode的周赛，从几天也开始决定参加Leetcode的每日一题。思来想去，感觉也进行记录一下比较好。虽然大半年前也在搞这个东西，但是当时不会用hexo，当时只是使用markdown在本地进行记录，日常查看不如hexo方便。现在决定将Leetcode的每一题、周赛以及双周赛等等，总之就是对自己的学习做一个记录，方便朝花夕拾。</p><p>今日的Leetcode每日一题为<a href="https://leetcode.cn/problems/reverse-string-ii/description/">541. 反转字符串 II</a>。这里也使用官方题解作为参考：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + <span class="built_in">min</span>(i + k, n));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/reverse-string-ii/solutions/946553/fan-zhuan-zi-fu-chuan-ii-by-leetcode-sol-ua7s/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h1>思路分析</h1><p>官方题解的核心思想很简单，就是遍历字符串，每次跳过2k个字符串，然后翻转前k个,翻转字符串使用reverse函数。使用for循环进行遍历，i从0开始，每次增加2k即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>k)</span><br></pre></td></tr></table></figure><p>翻转前k个字符，即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span> (s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + i + k);</span><br></pre></td></tr></table></figure><p>此外还有两种特殊情况：</p><ul><li>如果剩余字符少于k个，就将这些字符剩余字符全部翻转</li><li>如果剩余字符少于2k个，但是大于k个，仍然将前k个字符进行翻转，其余字符保持不变。</li></ul><p>所以下述代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span> (s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + i + k);</span><br></pre></td></tr></table></figure><p>要修改成</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span> (s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + <span class="built_in">min</span>(i + k, n));</span><br></pre></td></tr></table></figure><p>使用min(i + k, n)就可以将一般情况和两种特殊情况包含进来。其实一般情况和剩余字符少于2k个但大于k个可以归为一种情况，因为它们都需要翻转前k个字符，此时min(i + k, n) = i + k。而第二种特殊情况则不同，此时剩余字符不足k个，因此min (i + k, n) = n。</p><h1>时间复杂度</h1><p>字符串的长度为n，对于一个输入参数k，循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k)</span><br></pre></td></tr></table></figure><p>的循环次数：</p><ul><li>当n为2k的整数倍时，循环次数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn><mi>k</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></li><li>当n不是2k的整数倍时，循环次数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn><mi>k</mi></mrow></mfrac><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{n}{2k}+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span>（向上取整）</li></ul><p>因此循环次数可以表示为O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mi>k</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>)。在每次循环中，执行reverse函数，reverse函数的时间复杂度为O(k)，因为在每次循环中reverse需要交换<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>k</mi></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{k}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8801079999999999em;"></span><span class="strut bottom" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>对字符。因此总的时间复杂度为O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mi>k</mi></mrow></mfrac><mo>×</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">\frac{n}{k} \times k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">×</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>)即O(n)。</p><h1>空间复杂度</h1><p>使用了常数个变量，故空间复杂度为O(1)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从12月份开始到现在陆陆续续参加了几次Leetcode的周赛，从几天也开始决定参加Leetcode的每日一题。思来想去，感觉也进行记录一下比较好。虽然大半年前也在搞这个东西，但是当时不会用hexo，当时只是使用markdown在本地进行记录，日常查看不如hexo方便。现在决</summary>
      
    
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/categories/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="Leetcode 每日一题" scheme="http://malone-ai.github.io/tags/Leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>收收心，开始学习算法：子集和DP</title>
    <link href="http://malone-ai.github.io/2025/01/30/algorithm1/"/>
    <id>http://malone-ai.github.io/2025/01/30/algorithm1/</id>
    <published>2025-01-30T09:15:08.000Z</published>
    <updated>2025-02-04T16:31:08.439Z</updated>
    
    <content type="html"><![CDATA[<h1>收心回顾</h1><p>假期过了一半了，从1月9日开始到现在，已经21天了，假期余额18天。前面21天基本上是在看书、学习stm32、编程以及play。</p><p>看的书有《嵌入式C语言的自我修养》和《编译原理》，前一本看的比较多了，后一本就看了编译的基本过程，还得继续推进。</p><p>学习stm32是一个很有意思的过程，江科大的stm32教程就很高质量，目前已经学习到了使用按键控制LED。父亲每天看到我的stm32开发套件都很兴奋，他自学了电工知识，很厉害。</p><p>说自己编程了感觉自己就是在刷题，leetcode、洛谷、codeforce等等。其实在放假前的两周自己的编程的热情高涨，不是指刷题，是参与开源等等，连专业课都不顾直接去参与开源项目。考算法设计技巧与分析的前一天在给某个Github仓库的16位操作系统写clear的shell命令，然后复习三个小时，其实俺也不想复习，那天舍友发疯，吵吵闹闹到了3点半，流泪复习到4点，然后去参加9点的考试QVQ。11点考完出来吃完饭就去开发free命令，然后参与其他的开源项目，当时下一场考试是机器学习，在三天后，用了两天半去编程，半天复习考试。放假回家后没有那么高得热情了，主要是因为网络的问题。Github的仓库clone不下来也push不上去，直接download下来也不行，崩溃了。目前笔者写的这篇文章估计也得在返校之后才能放到服务器上。玩comfyui的时候，都是靠朋友下载再通过wechat传过来。不知道网络是因为DNS劫持，还是因为地域的问题。</p><p>至于play就不用多说了。</p><p><img src="/images/zhen_zi_dan.jpg" alt="嘻嘻"></p><h1>余下假期打算</h1><p>后续的18天，决定用来学习一下算法、stm32并且精进一下C++。我发现了一个很好的网站<a href="https://oi-wiki.org">OI wiki</a>，用来学习算法正合适。stm32还是接着看B站江科大的视频，再从嘉立创找点项目做做感觉就行，但是目前还是先学完江科大的视频为先。精进C++不知道用什么办法比较好，目前用Github是不行了，看看网上游戏开发是否可行。</p><h1>今日算法</h1><p>今天就学了学子集和DP，DP就是动态规划（Dynamic programing），OI wiki讲的比较抽象，就看了博客园的一篇博客<a href="https://www.cnblogs.com/Tenshi/p/14520614.html">【DP】解析 SOSdp（子集和 dp）</a>，感觉挺不错的。</p><p>子集和DP用于处理前缀和问题。前缀和问题，在一维时就是数列的前n项和；在二维或者多维度情况下给了两种方法：</p><ul><li>容斥原理<br>容斥原理（可以参考OI wiki的<a href="https://oi-wiki.org/math/combinatorics/inclusion-exclusion-principle/">容斥原理</a>）就比方说班上有30个人喜欢语文，20个人喜欢数学，40个人喜欢英语，问这个班上有多少个人。如果单纯地将这三个数字相加肯定是大于班上的总人数的，因为班上会有部分人喜欢其中的两门甚至三门。这个感觉还需要再去理解一下，通过韦恩图和集合能很好理解两类或者三类的情况，但是对于更多类没有理解透彻。OI wiki上还给了一道例题<a href="https://www.luogu.com.cn/problem/P1387">洛谷 P1387 最大正方形</a></li><li>逐维求和<br>逐维求和就是每次固定一个维度，求其它维度，直到固定完所有维度。</li></ul><p>而子集和DP主要是用于求高维前缀和问题，子集和即Sum Over Subsets。子集和问题的大致描述为：一个大小为n的集合上定义了一个函数f，要求出子集和函数g，且有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo>(</mo><mi>S</mi><mo>)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>T</mi><mo>⊆</mo><mi>S</mi></mrow></msub><mi>f</mi><mo>(</mo><mi>T</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">g(S)=\sum_{T \subseteq S}f(T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.050005em;"></span><span class="strut bottom" style="height:2.43952em;vertical-align:-1.389515em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mrel">=</span><span class="mop op-limits"><span class="vlist"><span style="top:1.194336em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mrel">⊆</span><span class="mord mathit" style="margin-right:0.05764em;">S</span></span></span></span><span style="top:-0.000005000000000032756em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></span></p><p>其中T是集合S的所有子集。<br>这里直接引用OI wiki的<a href="https://oi-wiki.org/basic/prefix-sum/#%E7%89%B9%E4%BE%8B%E5%AD%90%E9%9B%86%E5%92%8C-dp">代码</a>吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  std::cin &gt;&gt; n;</span><br><span class="line">  <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">1</span> &lt;&lt; n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span>&amp; x : a) std::cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Copy.</span></span><br><span class="line">  <span class="keyword">auto</span> ps = a;</span><br><span class="line">  <span class="comment">// Loop over dimensions.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="comment">// Loop over i-th dimension.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> st = <span class="number">0</span>; st &lt; (<span class="number">1</span> &lt;&lt; n); ++st) &#123;</span><br><span class="line">      <span class="comment">// This condition implies that i-th dimension is 1.</span></span><br><span class="line">      <span class="keyword">if</span> ((st &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// ps[... 1 ...] += ps[... 0 ...]. (i-th dimension)</span></span><br><span class="line">        ps[st] += ps[st ^ (<span class="number">1</span> &lt;&lt; i)];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> x : ps) std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>n表示集合中有n个元素，a是二进制编码，表示在该点的取值。在两层for循环中，外层循环用于遍历二进制编码的每一位，内层循环用于遍历每一个状态。貌似有点说不清的感觉。。。如果n为2，则使用两位二进制编码，1 &lt;&lt; n即1 &lt;&lt; 2 = 4，也就是a有四个元素，a[0]就是a[00]，a[1]就是a[01],a[2]就是a[10]，a[3]就是a[11]。把a[00]看成a[0][0]或许更好理解一点。ps数组就是前缀和数组，ps[1][1]即a[0][0]+a[0][1]+a[1][0]+a[1][1]。这样感觉更容易理解。内层循环就是遍历二进制编码的每一位，内层循环遍历a中每一个元素即a[0][0]、a[0][1]、a[1][0]、a[1][1]，虽然循环里显示的是ps，但是使用了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> ps=a</span><br></pre></td></tr></table></figure><p>将a拷贝了一份给ps。两层循环实现了每次遍历a中每一个元素的每一位，最终遍历完所有位，也就是前面所说的逐维求和。注意在遍历时就像二进制变化一样，也就是先a[00]，然后a[01]，再然后a[10]、a[11]。在循环里还有一个判断条件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (st &gt;&gt; i &amp; <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>其实就是在遍历第i位二进制编码，判断其是否为1。如果其为1，就对其取反。'^'符号是按位异或符号，当为1时，与1异或得0，从而实现第i位取反。<br>还有一点就是a[00]的子集为a[00]，而a[10]的子集有a[10]和a[00]。简单点说就是如果某一位为1，就将该位置为0作为一个子集。再比如说a[101]的子集有a[100]、a[001]、a[000]和a[101]。当i=0时，也就是二进制的最低位，p[11]+=p[10]。<br>至于为什么要加下列判断条件呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (st &gt;&gt; i &amp; <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>其实是为了正确求和。当有此判断条件时，可以使得p[10]+=p[00]，注意是&quot;+=&quot;，前面差点把+忘了，p[00]=a[00]，最终可得p[10]=a[10]+a[00]。如果没有此判断条件就会使得p[10]+=(p[11]+p[00])，也就是说把p[11]也当成了p[10]的子集＋上了，这就会与求ps[1][0]时，本来ps[1][0]=a[0][0]+a[0][1]+a[1][0]，但却错误地把a[1][1]也加进去了，并且其他元素也有重复计算。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;收心回顾&lt;/h1&gt;
&lt;p&gt;假期过了一半了，从1月9日开始到现在，已经21天了，假期余额18天。前面21天基本上是在看书、学习stm32、编程以及play。&lt;/p&gt;
&lt;p&gt;看的书有《嵌入式C语言的自我修养》和《编译原理》，前一本看的比较多了，后一本就看了编译的基本过程，还得</summary>
      
    
    
    
    <category term="算法" scheme="http://malone-ai.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://malone-ai.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="http://malone-ai.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>更改默认渲染器，加快渲染速度</title>
    <link href="http://malone-ai.github.io/2025/01/29/hexo1/"/>
    <id>http://malone-ai.github.io/2025/01/29/hexo1/</id>
    <published>2025-01-29T09:19:47.000Z</published>
    <updated>2025-02-05T02:45:42.559Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然发现之前使用hexo部署的博客加载慢并不是因为网速或者服务器在国外。而是与渲染器有关。发现这个是因为发现markdown数学公式在部署后没有正确渲染，寻找解决办法时意外发现的。</p><p>首先在根目录下执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><p>用来删除Hexo默认的渲染器，默认的渲染器不支持KaTex，因此需要更换为<code>hexo-renderer-markdown-it</code>作为渲染器并且安装<code>markdown-it-katex插件</code>，通过以下命令实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-markdown-it markdown-it-katex --save</span><br></pre></td></tr></table></figure><p>然后在Hexo的配置文件_config.yml中添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-katex</span></span><br></pre></td></tr></table></figure><p>以配置<code>markdown-it</code>和<code>markdown-it-katex</code>。</p><p>通过上述配置虽然没有正确渲染公式（公式虽然渲染出来了，但是有点偏移），但是发现网页加载的出奇得快，感觉是新的渲染器<code>hexo-renderer-markdown-it</code>渲染能力比较强。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天突然发现之前使用hexo部署的博客加载慢并不是因为网速或者服务器在国外。而是与渲染器有关。发现这个是因为发现markdown数学公式在部署后没有正确渲染，寻找解决办法时意外发现的。&lt;/p&gt;
&lt;p&gt;首先在根目录下执行以下命令：&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    <category term="hexo" scheme="http://malone-ai.github.io/categories/hexo/"/>
    
    
    <category term="前端" scheme="http://malone-ai.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="博客" scheme="http://malone-ai.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Pomopomo</title>
    <link href="http://malone-ai.github.io/2024/12/25/Pomopomo/"/>
    <id>http://malone-ai.github.io/2024/12/25/Pomopomo/</id>
    <published>2024-12-25T15:22:07.000Z</published>
    <updated>2025-02-04T16:33:21.445Z</updated>
    
    <content type="html"><![CDATA[<h1>番茄钟开发学习笔记</h1><h2 id="项目简介">项目简介</h2><p>在DataWhale活动中，我使用豆包AI编程助手基于HTML和JavaScript开发了一个番茄钟应用。番茄钟是一种时间管理工具，通过分割工作时间和休息时间，提高工作效率和专注度。</p><h2 id="项目目标">项目目标</h2><ul><li>设计简洁：界面简洁直观，用户友好。</li><li>功能完善：实现基本的番茄工作法功能，计时、暂停、重置和统计。</li><li>跨平台兼容：确保在不同浏览器和设备上正常运行。</li><li>代码优化：编写高效、可维护的代码，遵循最佳实践。</li></ul><h2 id="技术栈">技术栈</h2><ul><li>前端：<ul><li>HTML5</li><li>CSS3</li><li>JavaScript (ES6)</li></ul></li><li>开发工具：<ul><li>Visual Studio Code</li><li>豆包AI编程助手</li></ul></li></ul><h2 id="开发步骤">开发步骤</h2><ol><li>项目初始化<br>创建项目文件夹，初始化Git仓库。<br>结构如下：</li><li>设计界面<br>使用HTML构建基本结构，包括计时显示、控制按钮（开始、暂停、重置）。<br>使用CSS进行样式设计，确保界面响应式，适配不同屏幕尺寸。</li><li>实现计时功能<br>使用JavaScript实现倒计时逻辑。<br>处理开始、暂停、重置按钮的事件。</li><li>添加统计功能<br>记录完成的番茄钟次数。<br>使用localStorage保存数据，持久化统计信息。</li><li>优化用户体验<br>添加声音提醒。<br>实现暗模式和亮模式切换。<br>增加动画效果，提高交互性。</li></ol><h2 id="遇到的挑战与解决方案">遇到的挑战与解决方案</h2><ol><li>定时器精度问题<br>挑战：使用setInterval可能导致计时不够精确，特别是在浏览器标签页不活跃时。</li></ol><p>解决方案：改用基于Date的计算，通过记录开始时间和当前时间差来精准计算剩余时间。</p><ol start="2"><li>响应式设计实现<br>挑战：确保应用在不同设备和屏幕尺寸下都能良好显示。</li></ol><p>解决方案：使用CSS媒体查询和弹性布局（Flexbox）优化布局，确保元素自适应调整。</p><ol start="3"><li>数据持久化<br>挑战：如何在用户关闭页面后保留统计数据。</li></ol><p>解决方案：利用localStorage在浏览器中存储完成的番茄钟次数，实现数据的持久化。</p><h1>学习收获</h1><ul><li>前端技能提升：通过项目实践，深入理解HTML、CSS和JavaScript的基本用法和高级技巧。</li><li>项目管理：学会使用Git进行版本控制，合理分配开发任务，保持代码整洁。</li><li>问题解决能力：在开发过程中遇到问题，通过查阅文档、寻求社区帮助，掌握了有效的解决问题的方法。</li><li>用户体验设计：了解用户需求，优化界面和交互，提高应用的易用性和用户满意度。</li></ul><h1>未来改进</h1><p>多语言支持：添加多种语言选择，提升国际用户体验。<br>数据可视化：使用图表展示工作与休息时间的分配情况。<br>用户账户系统：允许用户注册和登录，保存个性化设置和统计数据。<br>移动应用开发：将Web版番茄钟转化为移动应用，扩展使用场景。</p><h1>总结</h1><p>通过本次项目，我不仅实践了前端开发的基本技能，还提高了我的项目管理和问题解决能力。通过使用豆包AI编程助手的辅助，我能够更高效地完成开发任务，为未来的项目打下了坚实的基础。未来，我计划在此基础上添加更多功能，进一步提升应用的实用性和用户体验。</p><h1>致谢</h1><p>感谢DataWhale提供的学习平台和资源，以及豆包AI编程助手在开发过程中的有力支持。</p><h1>参考资料</h1><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95">番茄工作法</a></li><li><a href="https://www.datawhale.cn/activity/116/23/94?rankingPage=1">Datawhale</a></li><li><a href="https://www.marscode.cn/home?utm_source=school&amp;utm_medium=datawhalelearn&amp;utm_campaign=camp1">豆包AI编程助手</a></li></ul><h1>附录</h1><h2 id="完整代码">完整代码</h2><h3 id="index-html"><code>index.html</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>番茄时钟<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.tailwindcss.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 自定义样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.timer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Helvetica Neue&#x27;</span>, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">5rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.buttons</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: background-color <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.start</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.start</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#45a049</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.pause</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ff9800</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.pause</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f57c00</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.reset</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f44336</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.button</span><span class="selector-class">.reset</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#e53935</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#stats</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;Arial, sans-serif&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;bg-gray-100 flex items-center justify-center h-screen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-white p-8 rounded shadow-md w-96&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-2xl font-semibold mb-4&quot;</span>&gt;</span>番茄时钟<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;timer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;timer text-4xl font-bold text-gray-700&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex mt-8 buttons&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button start&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;pause&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button pause&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;stats&quot;</span>&gt;</span>已完成番茄钟次数：0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="script-js"><code>script.js</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timer;</span><br><span class="line"><span class="keyword">let</span> isRunning = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> time = <span class="number">1500</span>; <span class="comment">// 25分钟</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timerDisplay = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;timer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> startBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pauseBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pause&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> resetBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;reset&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> statsDisplay = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;stats&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateDisplay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>(time / <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">const</span> seconds = time % <span class="number">60</span>;</span><br><span class="line">    timerDisplay.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;minutes.toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>:<span class="subst">$&#123;seconds.toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateStats</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;pomodoroCount&#x27;</span>) || <span class="number">0</span>;</span><br><span class="line">    statsDisplay.<span class="property">textContent</span> = <span class="string">`已完成番茄钟次数：<span class="subst">$&#123;count&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isRunning) <span class="keyword">return</span>;</span><br><span class="line">    isRunning = <span class="literal">true</span>;</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            time--;</span><br><span class="line">            <span class="title function_">updateDisplay</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">            isRunning = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">let</span> count = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;pomodoroCount&#x27;</span>) || <span class="number">0</span>;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;pomodoroCount&#x27;</span>, count);</span><br><span class="line">            <span class="title function_">updateStats</span>();</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;时间到！&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pauseTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    isRunning = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resetTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    isRunning = <span class="literal">false</span>;</span><br><span class="line">    time = <span class="number">1500</span>;</span><br><span class="line">    <span class="title function_">updateDisplay</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, startTimer);</span><br><span class="line">pauseBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, pauseTimer);</span><br><span class="line">resetBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, resetTimer);</span><br><span class="line"></span><br><span class="line"><span class="title function_">updateDisplay</span>();</span><br><span class="line"><span class="title function_">updateStats</span>();</span><br></pre></td></tr></table></figure><h3 id="styles-css"><code>styles.css</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#timer</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.controls</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#stats</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;番茄钟开发学习笔记&lt;/h1&gt;
&lt;h2 id=&quot;项目简介&quot;&gt;项目简介&lt;/h2&gt;
&lt;p&gt;在DataWhale活动中，我使用豆包AI编程助手基于HTML和JavaScript开发了一个番茄钟应用。番茄钟是一种时间管理工具，通过分割工作时间和休息时间，提高工作效率和专注度。&lt;/p</summary>
      
    
    
    
    <category term="前端" scheme="http://malone-ai.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://malone-ai.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="AI编程" scheme="http://malone-ai.github.io/tags/AI%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>实现 Shell 的 clear 命令</title>
    <link href="http://malone-ai.github.io/2024/12/23/OS-32Bit/"/>
    <id>http://malone-ai.github.io/2024/12/23/OS-32Bit/</id>
    <published>2024-12-23T03:38:46.000Z</published>
    <updated>2025-02-04T16:32:56.718Z</updated>
    
    <content type="html"><![CDATA[<h1>简述</h1><p> 在这篇博客中，我将分享如何在一个操作系统项目<a href="https://github.com/IlanVinograd/OS_32Bit">IlanVinograd/OS_32Bit</a>中实现 clear 命令，进行清屏，然后重置光标定位到左上角的问题。</p><h2 id="开始遇到的问题">开始遇到的问题</h2><p> 一开始我遇到的问题是 Docker，这个项目的作者提供了 Dockerfile 文件来帮助配置环境，但是国内就连不上 Docker ( QvQ 或许有，但是我暂时不知道怎么搞，放到后续去学吧)。所以我就按照 Dockerfile 文件在本地安装了依赖，在本地编译所需要的工具，像 binutils 和 gcc-i686-elf ，并配置好环境变量，很顺利地在本地运行起了项目，不得不说项目作者很有水平。</p><p> 在操作系统的 Shell 中，clear 命令用于清空屏幕并将光标重置到左上角。一开始我是在 Code/Kernel/Sources/shell.c 文件中的 handleBackgroundColor 函数中识别 clear 命令，然后调用 clearScreen 函数进行清屏，在调用 setCursorPosition 函数将光标重置到左上角。但是这样进行处理有一点问题。 输入 clear 命令后要按下回车，有一个专门的函数 handle_enter 函数会覆盖掉我对 setCursorPosition 函数的调用， handle_enter 函数会自动将光标定位到下一行开头。所以我就在这个函数里也对 clear 命令进行识别，然后刷新输入缓冲区，退出即可。</p><p> 正当我兴致勃勃的想要向项目作者申请 issue 的 assign 时，并发起 Pull request 时，我不小心在本地合并分支到了 main 分支。虽然我学习过 git 的使用，但是确实用的太少了，导致很多命令不熟悉，进行了误操作，后续写一篇博客总结总结。所以又重新 clone 了项目， 进行修改。这次我突然想到为何要在 handleBackgroundColor 函数里识别 clear 命令呢？直接在 handle_enter 统一处理所有的 shell 命令不就行了。这里补充一点，项目作者实现了这个 32 位操作系统的整体框架，大部分 shell 命令都没有实现。在我进行的时候仅仅只实现了一个 test 测试命令。当然正是这个命令启发了我，让我使用最少的代码、最小的修改完成了这个功能。一开始我还使用关中断的方式实现原子操作来实现清屏与光标重定位，虽然没成功，但 exp++，哈哈。</p><h2 id="修改内容">修改内容</h2><ol><li>更新 handle_enter 函数<br> 首先，我在 handle_enter 函数中添加了对 clear 命令的处理逻辑。具体来说，当检测到输入的命令不是 clear 时，将光标移动到下一行的开头。否则，清空屏幕并将光标重置到左上角。</li></ol><p>修改前：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle_enter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">uint16_t</span> row = keyboard_cursor_position / VGA_COLS;</span><br><span class="line">    <span class="type">uint16_t</span> col = keyboard_cursor_position % VGA_COLS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear the blinking cursor before processing</span></span><br><span class="line">    <span class="built_in">setCursorPosition</span>(row, col);</span><br><span class="line">    <span class="built_in">putc</span>(<span class="string">&#x27; &#x27;</span>, COLOR_BLACK_ON_WHITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Shell Functions</span></span><br><span class="line">    <span class="built_in">scrollIfNeeded</span>(row);</span><br><span class="line">    <span class="built_in">handleBackgroundColor</span>(inputBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//test temp</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">uint8_t</span>*)inputBuffer, (<span class="type">uint8_t</span>*)<span class="string">&quot;test&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">create_task</span>((<span class="type">uintptr_t</span>)test);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// end test temp</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Move cursor to the next line</span></span><br><span class="line">    row++;</span><br><span class="line">    <span class="keyword">if</span> (row &gt;= VGA_ROWS) &#123;</span><br><span class="line">        <span class="comment">// Scroll again if we&#x27;re still at the last row</span></span><br><span class="line">        <span class="built_in">scroll_screen</span>();</span><br><span class="line">        row = VGA_ROWS - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    keyboard_cursor_position = row * VGA_COLS;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setCursorPosition</span>(row, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset input buffer to default size</span></span><br><span class="line">    <span class="built_in">free</span>(inputBuffer); <span class="comment">// Free the current buffer</span></span><br><span class="line">    inputBufferSize = <span class="number">256</span>; <span class="comment">// Reset the buffer size</span></span><br><span class="line">    inputBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(inputBufferSize); <span class="comment">// Allocate a new buffer</span></span><br><span class="line">    <span class="keyword">if</span> (!inputBuffer) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Could not reallocate input buffer.\n&quot;</span>, RED_ON_BLACK_WARNING);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inputBuffer[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// Initialize the buffer</span></span><br><span class="line">    inputBufferIndex = <span class="number">0</span>;  <span class="comment">// Reset the index</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle_enter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">uint16_t</span> row = keyboard_cursor_position / VGA_COLS;</span><br><span class="line">    <span class="type">uint16_t</span> col = keyboard_cursor_position % VGA_COLS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear the blinking cursor before processing</span></span><br><span class="line">    <span class="built_in">setCursorPosition</span>(row, col);</span><br><span class="line">    <span class="built_in">putc</span>(<span class="string">&#x27; &#x27;</span>, COLOR_BLACK_ON_WHITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Shell Functions</span></span><br><span class="line">    <span class="built_in">scrollIfNeeded</span>(row);</span><br><span class="line">    <span class="built_in">handleBackgroundColor</span>(inputBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//test temp</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">uint8_t</span>*)inputBuffer, (<span class="type">uint8_t</span>*)<span class="string">&quot;test&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">create_task</span>((<span class="type">uintptr_t</span>)test);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// end test temp</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Move cursor to the next line if it is not clear command</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">uint8_t</span>*)inputBuffer, (<span class="type">uint8_t</span>*)<span class="string">&quot;clear&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        row++;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= VGA_ROWS) &#123;</span><br><span class="line">            <span class="comment">// Scroll again if we&#x27;re still at the last row</span></span><br><span class="line">            <span class="built_in">scroll_screen</span>();</span><br><span class="line">            row = VGA_ROWS - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        keyboard_cursor_position = row * VGA_COLS;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setCursorPosition</span>(row, <span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">clearScreen</span>();</span><br><span class="line">        keyboard_cursor_position = <span class="number">2</span> * VGA_COLS;</span><br><span class="line">        <span class="built_in">setCursorPosition</span>(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset input buffer to default size</span></span><br><span class="line">    <span class="built_in">free</span>(inputBuffer); <span class="comment">// Free the current buffer</span></span><br><span class="line">    inputBufferSize = <span class="number">256</span>; <span class="comment">// Reset the buffer size</span></span><br><span class="line">    inputBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(inputBufferSize); <span class="comment">// Allocate a new buffer</span></span><br><span class="line">    <span class="keyword">if</span> (!inputBuffer) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Could not reallocate input buffer.\n&quot;</span>, RED_ON_BLACK_WARNING);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inputBuffer[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// Initialize the buffer</span></span><br><span class="line">    inputBufferIndex = <span class="number">0</span>;  <span class="comment">// Reset the index</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>修复 clearScreen 函数<br> 接下来，我修复了 clearScreen 函数，使其从行索引 2 开始清除，而不是原先的行索引 3。从索引 2 开始清除是因为项目作者在前两行打印了系统的一些信息。这里估计是项目作者一时疏忽。</li></ol><p> 为了确保修改后的代码正常工作，我重新编译，使用 qemu 模拟器(有没有大佬教教我怎么掌握这玩意儿，网上教程好少)启动这个系统，接下来：</p><ul><li>在 Shell 中输入 clear 命令并按下回车。</li><li>验证屏幕是否被清空，并且光标是否正确定位到左上角。</li></ul><h2 id="总结">总结</h2><p> 通过上述修改，我成功实现了 Shell 的 clear 命令。现在，输入 clear 命令后，屏幕会被清空，光标正确定位到左上角，同时不影响其他命令的正常运行。<br> 简单总结一下 git 的使用。首先将项目仓库 fork 到自己的 GitHub，然后从自己的 Github 将项目 clone 到本地。创建新的分支 new_branch_name（随便取的名字，只是做一个例子），在这个分支上进行修改。修改完毕后 git add 提交修改的文件，然后 git commit -m 对所进行的修改进行描述，使用双引号 &quot; 开头，可以实现多行描述，最后使用双引号 &quot; 结尾即可。一般 commit 的第一行对实现的功能或者修改进行大致描述，然后空一行详细描述做出的修改，比如修改了那个文件的那个函数等等。空一行是为了在执行 git log --oneline 时只展示大致描述，而不展示详细描述。做完上述工作后执行 git push origin new_branch_name 命令，然后登陆 Github 到自己的仓库页面，就可以看到 Create pull request 按钮提示你有一个合并请求。点击后像 commit 一样填写 decription 即可。如果你的 commit 只有一个它会自动帮你填写成你的 commit 。否则不会帮你自动填写。这样就算是一个完整的 PR 啦！<br> 总结一句话就是收获满满！<br> 希望这篇博客对您有所帮助。如果您有任何问题或建议，欢迎在评论区留言（评论区还没搓好，待续啦）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;简述&lt;/h1&gt;
&lt;p&gt; 在这篇博客中，我将分享如何在一个操作系统项目&lt;a href=&quot;https://github.com/IlanVinograd/OS_32Bit&quot;&gt;IlanVinograd/OS_32Bit&lt;/a&gt;中实现 clear 命令，进行清屏，然后重置光标定位</summary>
      
    
    
    
    <category term="操作系统" scheme="http://malone-ai.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Shell命令" scheme="http://malone-ai.github.io/tags/Shell%E5%91%BD%E4%BB%A4/"/>
    
    <category term="C语言" scheme="http://malone-ai.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="操作系统" scheme="http://malone-ai.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Hello, this is Malone!</title>
    <link href="http://malone-ai.github.io/2024/12/18/Hello-this-is-Malone/"/>
    <id>http://malone-ai.github.io/2024/12/18/Hello-this-is-Malone/</id>
    <published>2024-12-18T14:41:40.000Z</published>
    <updated>2025-01-30T09:10:35.684Z</updated>
    
    <content type="html"><![CDATA[<h1>欢迎来到我的个人博客</h1><p>大家好！我是Malone，欢迎来到我的个人博客。在这里，我将分享我对人工智能和编程的热情与探索。</p><h1>关于我</h1><p>从小我就对计算机充满了好奇心，尤其是AI和编程。随着时间的推移，我不断学习和实践，逐渐积累了一些经验和知识。现在，我希望通过这个博客，与大家分享我的学习心得和项目经验。</p><h1>博客目标</h1><p>这个博客的主要目标是：</p><ul><li><strong>分享知识</strong>：无论你是初学者还是有经验的开发者，我都希望我的文章能对你有所帮助。</li><li><strong>记录学习过程</strong>：通过记录我的学习过程，我希望能更好地理解和掌握AI和编程相关的知识。</li><li><strong>交流互动</strong>：我非常期待与大家交流，互相学习，共同进步。</li></ul><h1>未来计划</h1><p>在接下来的时间里，我计划撰写以下几个方面的内容：</p><!-- - **AI基础**：介绍AI的基本概念和原理。 --><ul><li><strong>编程教程</strong>：分享一些编程语言（主要是Python、C、C++）的教程和技巧。</li><li><strong>项目实战</strong>：展示一些实际项目的开发过程和心得体会。</li><li><strong>最新动态</strong>：分享AI和编程领域的最新研究成果和技术动态。</li></ul><h1>互动交流</h1><p>我非常欢迎大家在文章下方留言，提出问题或建议。你也可以通过邮箱favorite.vampire@qq.com与我取得联系，让我们一起交流和探讨。</p><h1>ending</h1><p>感谢你读到这里！希望我的博客能对你有所帮助。下一篇文章，我将介绍AI的基本概念，敬请期待！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;欢迎来到我的个人博客&lt;/h1&gt;
&lt;p&gt;大家好！我是Malone，欢迎来到我的个人博客。在这里，我将分享我对人工智能和编程的热情与探索。&lt;/p&gt;
&lt;h1&gt;关于我&lt;/h1&gt;
&lt;p&gt;从小我就对计算机充满了好奇心，尤其是AI和编程。随着时间的推移，我不断学习和实践，逐渐积累了一些</summary>
      
    
    
    
    <category term="其他" scheme="http://malone-ai.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
</feed>
